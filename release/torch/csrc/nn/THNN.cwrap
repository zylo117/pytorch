#include <TH/TH.h>


TH_API void THNN_FloatAbs_updateOutput(void*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatAbs_updateOutput
  return: void
  cname: THNN_FloatAbs_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
]]


TH_API void THNN_DoubleAbs_updateOutput(void*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleAbs_updateOutput
  return: void
  cname: THNN_DoubleAbs_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
]]


TH_API void THNN_FloatAbs_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatAbs_updateGradInput
  return: void
  cname: THNN_FloatAbs_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
]]


TH_API void THNN_DoubleAbs_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleAbs_updateGradInput
  return: void
  cname: THNN_DoubleAbs_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
]]


TH_API void THNN_FloatAbsCriterion_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatAbsCriterion_updateOutput
  return: void
  cname: THNN_FloatAbsCriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleAbsCriterion_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleAbsCriterion_updateOutput
  return: void
  cname: THNN_DoubleAbsCriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatAbsCriterion_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatAbsCriterion_updateGradInput
  return: void
  cname: THNN_FloatAbsCriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleAbsCriterion_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleAbsCriterion_updateGradInput
  return: void
  cname: THNN_DoubleAbsCriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatBCECriterion_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, THFloatTensor*, bool);
[[
  name: FloatBCECriterion_updateOutput
  return: void
  cname: THNN_FloatBCECriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - type: THFloatTensor*
      name: weights
      nullable: True
    - bool reduce
]]


TH_API void THNN_DoubleBCECriterion_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, THDoubleTensor*, bool);
[[
  name: DoubleBCECriterion_updateOutput
  return: void
  cname: THNN_DoubleBCECriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - type: THDoubleTensor*
      name: weights
      nullable: True
    - bool reduce
]]


TH_API void THNN_FloatBCECriterion_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, THFloatTensor*, bool);
[[
  name: FloatBCECriterion_updateGradInput
  return: void
  cname: THNN_FloatBCECriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - bool sizeAverage
    - type: THFloatTensor*
      name: weights
      nullable: True
    - bool reduce
]]


TH_API void THNN_DoubleBCECriterion_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, THDoubleTensor*, bool);
[[
  name: DoubleBCECriterion_updateGradInput
  return: void
  cname: THNN_DoubleBCECriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - type: THDoubleTensor*
      name: weights
      nullable: True
    - bool reduce
]]


TH_API void THNN_FloatClassNLLCriterion_updateOutput(void*, THFloatTensor*, THLongTensor*, THFloatTensor*, bool, THFloatTensor*, THFloatTensor*, int64_t, bool);
[[
  name: FloatClassNLLCriterion_updateOutput
  return: void
  cname: THNN_FloatClassNLLCriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THLongTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - type: THFloatTensor*
      name: weights
      nullable: True
    - THFloatTensor* total_weight
    - int64_t ignore_index
    - bool reduce
]]


TH_API void THNN_DoubleClassNLLCriterion_updateOutput(void*, THDoubleTensor*, THLongTensor*, THDoubleTensor*, bool, THDoubleTensor*, THDoubleTensor*, int64_t, bool);
[[
  name: DoubleClassNLLCriterion_updateOutput
  return: void
  cname: THNN_DoubleClassNLLCriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THLongTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - type: THDoubleTensor*
      name: weights
      nullable: True
    - THDoubleTensor* total_weight
    - int64_t ignore_index
    - bool reduce
]]


TH_API void THNN_FloatClassNLLCriterion_updateGradInput(void*, THFloatTensor*, THLongTensor*, THFloatTensor*, THFloatTensor*, bool, THFloatTensor*, THFloatTensor*, int64_t, bool);
[[
  name: FloatClassNLLCriterion_updateGradInput
  return: void
  cname: THNN_FloatClassNLLCriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THLongTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - bool sizeAverage
    - type: THFloatTensor*
      name: weights
      nullable: True
    - THFloatTensor* total_weight
    - int64_t ignore_index
    - bool reduce
]]


TH_API void THNN_DoubleClassNLLCriterion_updateGradInput(void*, THDoubleTensor*, THLongTensor*, THDoubleTensor*, THDoubleTensor*, bool, THDoubleTensor*, THDoubleTensor*, int64_t, bool);
[[
  name: DoubleClassNLLCriterion_updateGradInput
  return: void
  cname: THNN_DoubleClassNLLCriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THLongTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - type: THDoubleTensor*
      name: weights
      nullable: True
    - THDoubleTensor* total_weight
    - int64_t ignore_index
    - bool reduce
]]


TH_API void THNN_FloatSpatialClassNLLCriterion_updateOutput(void*, THFloatTensor*, THLongTensor*, THFloatTensor*, bool, THFloatTensor*, THFloatTensor*, int64_t, bool);
[[
  name: FloatSpatialClassNLLCriterion_updateOutput
  return: void
  cname: THNN_FloatSpatialClassNLLCriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THLongTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - type: THFloatTensor*
      name: weights
      nullable: True
    - THFloatTensor* total_weight
    - int64_t ignore_index
    - bool reduce
]]


TH_API void THNN_DoubleSpatialClassNLLCriterion_updateOutput(void*, THDoubleTensor*, THLongTensor*, THDoubleTensor*, bool, THDoubleTensor*, THDoubleTensor*, int64_t, bool);
[[
  name: DoubleSpatialClassNLLCriterion_updateOutput
  return: void
  cname: THNN_DoubleSpatialClassNLLCriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THLongTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - type: THDoubleTensor*
      name: weights
      nullable: True
    - THDoubleTensor* total_weight
    - int64_t ignore_index
    - bool reduce
]]


TH_API void THNN_FloatSpatialClassNLLCriterion_updateGradInput(void*, THFloatTensor*, THLongTensor*, THFloatTensor*, THFloatTensor*, bool, THFloatTensor*, THFloatTensor*, int64_t, bool);
[[
  name: FloatSpatialClassNLLCriterion_updateGradInput
  return: void
  cname: THNN_FloatSpatialClassNLLCriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THLongTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - bool sizeAverage
    - type: THFloatTensor*
      name: weights
      nullable: True
    - THFloatTensor* total_weight
    - int64_t ignore_index
    - bool reduce
]]


TH_API void THNN_DoubleSpatialClassNLLCriterion_updateGradInput(void*, THDoubleTensor*, THLongTensor*, THDoubleTensor*, THDoubleTensor*, bool, THDoubleTensor*, THDoubleTensor*, int64_t, bool);
[[
  name: DoubleSpatialClassNLLCriterion_updateGradInput
  return: void
  cname: THNN_DoubleSpatialClassNLLCriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THLongTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - type: THDoubleTensor*
      name: weights
      nullable: True
    - THDoubleTensor* total_weight
    - int64_t ignore_index
    - bool reduce
]]


TH_API void THNN_FloatELU_updateOutput(void*, THFloatTensor*, THFloatTensor*, double, double, bool);
[[
  name: FloatELU_updateOutput
  return: void
  cname: THNN_FloatELU_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - double alpha
    - double scale
    - bool inplace
]]


TH_API void THNN_DoubleELU_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, double, double, bool);
[[
  name: DoubleELU_updateOutput
  return: void
  cname: THNN_DoubleELU_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - double alpha
    - double scale
    - bool inplace
]]


TH_API void THNN_FloatELU_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double);
[[
  name: FloatELU_updateGradInput
  return: void
  cname: THNN_FloatELU_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* output
    - double alpha
    - double scale
]]


TH_API void THNN_DoubleELU_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double);
[[
  name: DoubleELU_updateGradInput
  return: void
  cname: THNN_DoubleELU_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* output
    - double alpha
    - double scale
]]


TH_API void THNN_FloatDistKLDivCriterion_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatDistKLDivCriterion_updateOutput
  return: void
  cname: THNN_FloatDistKLDivCriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleDistKLDivCriterion_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleDistKLDivCriterion_updateOutput
  return: void
  cname: THNN_DoubleDistKLDivCriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatDistKLDivCriterion_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatDistKLDivCriterion_updateGradInput
  return: void
  cname: THNN_FloatDistKLDivCriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleDistKLDivCriterion_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleDistKLDivCriterion_updateGradInput
  return: void
  cname: THNN_DoubleDistKLDivCriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatGatedLinear_updateOutput(void*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatGatedLinear_updateOutput
  return: void
  cname: THNN_FloatGatedLinear_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int dim
]]


TH_API void THNN_DoubleGatedLinear_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleGatedLinear_updateOutput
  return: void
  cname: THNN_DoubleGatedLinear_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int dim
]]


TH_API void THNN_FloatGatedLinear_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatGatedLinear_updateGradInput
  return: void
  cname: THNN_FloatGatedLinear_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int dim
]]


TH_API void THNN_DoubleGatedLinear_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleGatedLinear_updateGradInput
  return: void
  cname: THNN_DoubleGatedLinear_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int dim
]]


TH_API void THNN_FloatHardShrink_updateOutput(void*, THFloatTensor*, THFloatTensor*, double);
[[
  name: FloatHardShrink_updateOutput
  return: void
  cname: THNN_FloatHardShrink_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - double lambda
]]


TH_API void THNN_DoubleHardShrink_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, double);
[[
  name: DoubleHardShrink_updateOutput
  return: void
  cname: THNN_DoubleHardShrink_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - double lambda
]]


TH_API void THNN_FloatHardShrink_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double);
[[
  name: FloatHardShrink_updateGradInput
  return: void
  cname: THNN_FloatHardShrink_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - double lambda
]]


TH_API void THNN_DoubleHardShrink_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double);
[[
  name: DoubleHardShrink_updateGradInput
  return: void
  cname: THNN_DoubleHardShrink_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - double lambda
]]


TH_API void THNN_FloatHardTanh_updateOutput(void*, THFloatTensor*, THFloatTensor*, double, double, bool);
[[
  name: FloatHardTanh_updateOutput
  return: void
  cname: THNN_FloatHardTanh_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - double min_val
    - double max_val
    - bool inplace
]]


TH_API void THNN_DoubleHardTanh_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, double, double, bool);
[[
  name: DoubleHardTanh_updateOutput
  return: void
  cname: THNN_DoubleHardTanh_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - double min_val
    - double max_val
    - bool inplace
]]


TH_API void THNN_FloatHardTanh_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double, bool);
[[
  name: FloatHardTanh_updateGradInput
  return: void
  cname: THNN_FloatHardTanh_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - double min_val
    - double max_val
    - bool inplace
]]


TH_API void THNN_DoubleHardTanh_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double, bool);
[[
  name: DoubleHardTanh_updateGradInput
  return: void
  cname: THNN_DoubleHardTanh_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - double min_val
    - double max_val
    - bool inplace
]]


TH_API void THNN_FloatIm2Col_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int);
[[
  name: FloatIm2Col_updateOutput
  return: void
  cname: THNN_FloatIm2Col_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int kH
    - int kW
    - int dH
    - int dW
    - int padH
    - int padW
    - int sH
    - int sW
]]


TH_API void THNN_DoubleIm2Col_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int);
[[
  name: DoubleIm2Col_updateOutput
  return: void
  cname: THNN_DoubleIm2Col_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int kH
    - int kW
    - int dH
    - int dW
    - int padH
    - int padW
    - int sH
    - int sW
]]


TH_API void THNN_FloatIm2Col_updateGradInput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatIm2Col_updateGradInput
  return: void
  cname: THNN_FloatIm2Col_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int inputHeight
    - int inputWidth
    - int kH
    - int kW
    - int dH
    - int dW
    - int padH
    - int padW
    - int sH
    - int sW
]]


TH_API void THNN_DoubleIm2Col_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleIm2Col_updateGradInput
  return: void
  cname: THNN_DoubleIm2Col_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int inputHeight
    - int inputWidth
    - int kH
    - int kW
    - int dH
    - int dW
    - int padH
    - int padW
    - int sH
    - int sW
]]


TH_API void THNN_FloatCol2Im_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatCol2Im_updateOutput
  return: void
  cname: THNN_FloatCol2Im_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int outputHeight
    - int outputWidth
    - int kH
    - int kW
    - int dH
    - int dW
    - int padH
    - int padW
    - int sH
    - int sW
]]


TH_API void THNN_DoubleCol2Im_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleCol2Im_updateOutput
  return: void
  cname: THNN_DoubleCol2Im_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int outputHeight
    - int outputWidth
    - int kH
    - int kW
    - int dH
    - int dW
    - int padH
    - int padW
    - int sH
    - int sW
]]


TH_API void THNN_FloatCol2Im_updateGradInput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int);
[[
  name: FloatCol2Im_updateGradInput
  return: void
  cname: THNN_FloatCol2Im_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int kH
    - int kW
    - int dH
    - int dW
    - int padH
    - int padW
    - int sH
    - int sW
]]


TH_API void THNN_DoubleCol2Im_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int);
[[
  name: DoubleCol2Im_updateGradInput
  return: void
  cname: THNN_DoubleCol2Im_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int kH
    - int kW
    - int dH
    - int dW
    - int padH
    - int padW
    - int sH
    - int sW
]]


TH_API void THNN_FloatL1Cost_updateOutput(void*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatL1Cost_updateOutput
  return: void
  cname: THNN_FloatL1Cost_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
]]


TH_API void THNN_DoubleL1Cost_updateOutput(void*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleL1Cost_updateOutput
  return: void
  cname: THNN_DoubleL1Cost_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
]]


TH_API void THNN_FloatL1Cost_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatL1Cost_updateGradInput
  return: void
  cname: THNN_FloatL1Cost_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - type: THFloatTensor*
      name: gradOutput
      nullable: True
    - THFloatTensor* gradInput
]]


TH_API void THNN_DoubleL1Cost_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleL1Cost_updateGradInput
  return: void
  cname: THNN_DoubleL1Cost_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - type: THDoubleTensor*
      name: gradOutput
      nullable: True
    - THDoubleTensor* gradInput
]]


TH_API void THNN_FloatLeakyReLU_updateOutput(void*, THFloatTensor*, THFloatTensor*, double, bool);
[[
  name: FloatLeakyReLU_updateOutput
  return: void
  cname: THNN_FloatLeakyReLU_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - double negval
    - bool inplace
]]


TH_API void THNN_DoubleLeakyReLU_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, double, bool);
[[
  name: DoubleLeakyReLU_updateOutput
  return: void
  cname: THNN_DoubleLeakyReLU_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - double negval
    - bool inplace
]]


TH_API void THNN_FloatLeakyReLU_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, bool);
[[
  name: FloatLeakyReLU_updateGradInput
  return: void
  cname: THNN_FloatLeakyReLU_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - double negval
    - bool inplace
]]


TH_API void THNN_DoubleLeakyReLU_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, bool);
[[
  name: DoubleLeakyReLU_updateGradInput
  return: void
  cname: THNN_DoubleLeakyReLU_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - double negval
    - bool inplace
]]


TH_API void THNN_FloatGRUFused_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatGRUFused_updateOutput
  return: void
  cname: THNN_FloatGRUFused_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* hidden
    - type: THFloatTensor*
      name: bias1
      nullable: True
    - type: THFloatTensor*
      name: bias2
      nullable: True
    - THFloatTensor* hx
    - THFloatTensor* output
    - THFloatTensor* storage
]]


TH_API void THNN_DoubleGRUFused_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleGRUFused_updateOutput
  return: void
  cname: THNN_DoubleGRUFused_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* hidden
    - type: THDoubleTensor*
      name: bias1
      nullable: True
    - type: THDoubleTensor*
      name: bias2
      nullable: True
    - THDoubleTensor* hx
    - THDoubleTensor* output
    - THDoubleTensor* storage
]]


TH_API void THNN_FloatGRUFused_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatGRUFused_updateGradInput
  return: void
  cname: THNN_FloatGRUFused_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradInInput
    - THFloatTensor* gradInHidden
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInputHx
    - THFloatTensor* storage
]]


TH_API void THNN_DoubleGRUFused_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleGRUFused_updateGradInput
  return: void
  cname: THNN_DoubleGRUFused_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradInInput
    - THDoubleTensor* gradInHidden
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInputHx
    - THDoubleTensor* storage
]]


TH_API void THNN_FloatLSTMFused_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatLSTMFused_updateOutput
  return: void
  cname: THNN_FloatLSTMFused_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* hidden
    - type: THFloatTensor*
      name: bias1
      nullable: True
    - type: THFloatTensor*
      name: bias2
      nullable: True
    - THFloatTensor* cell
    - THFloatTensor* output
    - THFloatTensor* outputCell
]]


TH_API void THNN_DoubleLSTMFused_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleLSTMFused_updateOutput
  return: void
  cname: THNN_DoubleLSTMFused_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* hidden
    - type: THDoubleTensor*
      name: bias1
      nullable: True
    - type: THDoubleTensor*
      name: bias2
      nullable: True
    - THDoubleTensor* cell
    - THDoubleTensor* output
    - THDoubleTensor* outputCell
]]


TH_API void THNN_FloatLSTMFused_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatLSTMFused_updateGradInput
  return: void
  cname: THNN_FloatLSTMFused_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* storage
    - THFloatTensor* gradInGates
    - THFloatTensor* cx
    - THFloatTensor* cy
    - THFloatTensor* gradOutput
    - THFloatTensor* gradOutputCell
    - THFloatTensor* gradInputCx
]]


TH_API void THNN_DoubleLSTMFused_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleLSTMFused_updateGradInput
  return: void
  cname: THNN_DoubleLSTMFused_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* storage
    - THDoubleTensor* gradInGates
    - THDoubleTensor* cx
    - THDoubleTensor* cy
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradOutputCell
    - THDoubleTensor* gradInputCx
]]


TH_API void THNN_FloatLogSigmoid_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatLogSigmoid_updateOutput
  return: void
  cname: THNN_FloatLogSigmoid_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* buffer
]]


TH_API void THNN_DoubleLogSigmoid_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleLogSigmoid_updateOutput
  return: void
  cname: THNN_DoubleLogSigmoid_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* buffer
]]


TH_API void THNN_FloatLogSigmoid_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatLogSigmoid_updateGradInput
  return: void
  cname: THNN_FloatLogSigmoid_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* buffer
]]


TH_API void THNN_DoubleLogSigmoid_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleLogSigmoid_updateGradInput
  return: void
  cname: THNN_DoubleLogSigmoid_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* buffer
]]


TH_API void THNN_FloatLookupTable_accGradParameters(void*, THLongTensor*, THFloatTensor*, THFloatTensor*, THIntTensor*, THFloatTensor*, THLongTensor*, bool, int, double);
[[
  name: FloatLookupTable_accGradParameters
  return: void
  cname: THNN_FloatLookupTable_accGradParameters
  arguments:
    - void* state
    - THLongTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THIntTensor* count
    - type: THFloatTensor*
      name: sorted
      nullable: True
    - type: THLongTensor*
      name: indices
      nullable: True
    - bool scaleGradByFreq
    - int paddingValue
    - double scale
]]


TH_API void THNN_DoubleLookupTable_accGradParameters(void*, THLongTensor*, THDoubleTensor*, THDoubleTensor*, THIntTensor*, THDoubleTensor*, THLongTensor*, bool, int, double);
[[
  name: DoubleLookupTable_accGradParameters
  return: void
  cname: THNN_DoubleLookupTable_accGradParameters
  arguments:
    - void* state
    - THLongTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THIntTensor* count
    - type: THDoubleTensor*
      name: sorted
      nullable: True
    - type: THLongTensor*
      name: indices
      nullable: True
    - bool scaleGradByFreq
    - int paddingValue
    - double scale
]]


TH_API void THNN_FloatLookupTable_renorm(void*, THLongTensor*, THFloatTensor*, double, double);
[[
  name: FloatLookupTable_renorm
  return: void
  cname: THNN_FloatLookupTable_renorm
  arguments:
    - void* state
    - THLongTensor* idx
    - THFloatTensor* weight
    - double maxNorm
    - double normType
]]


TH_API void THNN_DoubleLookupTable_renorm(void*, THLongTensor*, THDoubleTensor*, double, double);
[[
  name: DoubleLookupTable_renorm
  return: void
  cname: THNN_DoubleLookupTable_renorm
  arguments:
    - void* state
    - THLongTensor* idx
    - THDoubleTensor* weight
    - double maxNorm
    - double normType
]]


TH_API void THNN_FloatMarginCriterion_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, double);
[[
  name: FloatMarginCriterion_updateOutput
  return: void
  cname: THNN_FloatMarginCriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - double margin
]]


TH_API void THNN_DoubleMarginCriterion_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, double);
[[
  name: DoubleMarginCriterion_updateOutput
  return: void
  cname: THNN_DoubleMarginCriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - double margin
]]


TH_API void THNN_FloatMarginCriterion_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, double);
[[
  name: FloatMarginCriterion_updateGradInput
  return: void
  cname: THNN_FloatMarginCriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* gradInput
    - bool sizeAverage
    - double margin
]]


TH_API void THNN_DoubleMarginCriterion_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, double);
[[
  name: DoubleMarginCriterion_updateGradInput
  return: void
  cname: THNN_DoubleMarginCriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - double margin
]]


TH_API void THNN_FloatSoftMarginCriterion_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatSoftMarginCriterion_updateOutput
  return: void
  cname: THNN_FloatSoftMarginCriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleSoftMarginCriterion_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleSoftMarginCriterion_updateOutput
  return: void
  cname: THNN_DoubleSoftMarginCriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatSoftMarginCriterion_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatSoftMarginCriterion_updateGradInput
  return: void
  cname: THNN_FloatSoftMarginCriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleSoftMarginCriterion_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleSoftMarginCriterion_updateGradInput
  return: void
  cname: THNN_DoubleSoftMarginCriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatMSECriterion_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatMSECriterion_updateOutput
  return: void
  cname: THNN_FloatMSECriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleMSECriterion_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleMSECriterion_updateOutput
  return: void
  cname: THNN_DoubleMSECriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatMSECriterion_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatMSECriterion_updateGradInput
  return: void
  cname: THNN_FloatMSECriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleMSECriterion_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleMSECriterion_updateGradInput
  return: void
  cname: THNN_DoubleMSECriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatMultiLabelMarginCriterion_updateOutput(void*, THFloatTensor*, THLongTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatMultiLabelMarginCriterion_updateOutput
  return: void
  cname: THNN_FloatMultiLabelMarginCriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THLongTensor* target
    - THFloatTensor* output
    - THFloatTensor* isTarget
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleMultiLabelMarginCriterion_updateOutput(void*, THDoubleTensor*, THLongTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleMultiLabelMarginCriterion_updateOutput
  return: void
  cname: THNN_DoubleMultiLabelMarginCriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THLongTensor* target
    - THDoubleTensor* output
    - THDoubleTensor* isTarget
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatMultiLabelMarginCriterion_updateGradInput(void*, THFloatTensor*, THLongTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatMultiLabelMarginCriterion_updateGradInput
  return: void
  cname: THNN_FloatMultiLabelMarginCriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THLongTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* isTarget
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleMultiLabelMarginCriterion_updateGradInput(void*, THDoubleTensor*, THLongTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleMultiLabelMarginCriterion_updateGradInput
  return: void
  cname: THNN_DoubleMultiLabelMarginCriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THLongTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* isTarget
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatMultiMarginCriterion_updateOutput(void*, THFloatTensor*, THLongTensor*, THFloatTensor*, bool, int, THFloatTensor*, double, bool);
[[
  name: FloatMultiMarginCriterion_updateOutput
  return: void
  cname: THNN_FloatMultiMarginCriterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THLongTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - int p
    - type: THFloatTensor*
      name: weights
      nullable: True
    - double margin
    - bool reduce
]]


TH_API void THNN_DoubleMultiMarginCriterion_updateOutput(void*, THDoubleTensor*, THLongTensor*, THDoubleTensor*, bool, int, THDoubleTensor*, double, bool);
[[
  name: DoubleMultiMarginCriterion_updateOutput
  return: void
  cname: THNN_DoubleMultiMarginCriterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THLongTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - int p
    - type: THDoubleTensor*
      name: weights
      nullable: True
    - double margin
    - bool reduce
]]


TH_API void THNN_FloatMultiMarginCriterion_updateGradInput(void*, THFloatTensor*, THLongTensor*, THFloatTensor*, THFloatTensor*, bool, int, THFloatTensor*, double, bool);
[[
  name: FloatMultiMarginCriterion_updateGradInput
  return: void
  cname: THNN_FloatMultiMarginCriterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THLongTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - bool sizeAverage
    - int p
    - type: THFloatTensor*
      name: weights
      nullable: True
    - double margin
    - bool reduce
]]


TH_API void THNN_DoubleMultiMarginCriterion_updateGradInput(void*, THDoubleTensor*, THLongTensor*, THDoubleTensor*, THDoubleTensor*, bool, int, THDoubleTensor*, double, bool);
[[
  name: DoubleMultiMarginCriterion_updateGradInput
  return: void
  cname: THNN_DoubleMultiMarginCriterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THLongTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - int p
    - type: THDoubleTensor*
      name: weights
      nullable: True
    - double margin
    - bool reduce
]]


TH_API void THNN_FloatPReLU_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatPReLU_updateOutput
  return: void
  cname: THNN_FloatPReLU_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
]]


TH_API void THNN_DoublePReLU_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoublePReLU_updateOutput
  return: void
  cname: THNN_DoublePReLU_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
]]


TH_API void THNN_FloatPReLU_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatPReLU_updateGradInput
  return: void
  cname: THNN_FloatPReLU_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
]]


TH_API void THNN_DoublePReLU_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoublePReLU_updateGradInput
  return: void
  cname: THNN_DoublePReLU_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
]]


TH_API void THNN_FloatPReLU_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double);
[[
  name: FloatPReLU_accGradParameters
  return: void
  cname: THNN_FloatPReLU_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* gradWeight
    - double scale
]]


TH_API void THNN_DoublePReLU_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double);
[[
  name: DoublePReLU_accGradParameters
  return: void
  cname: THNN_DoublePReLU_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* gradWeight
    - double scale
]]


TH_API void THNN_FloatLinear_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatLinear_updateOutput
  return: void
  cname: THNN_FloatLinear_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* addBuffer
]]


TH_API void THNN_DoubleLinear_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleLinear_updateOutput
  return: void
  cname: THNN_DoubleLinear_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* addBuffer
]]


TH_API void THNN_FloatLinear_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatLinear_updateGradInput
  return: void
  cname: THNN_FloatLinear_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
]]


TH_API void THNN_DoubleLinear_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleLinear_updateGradInput
  return: void
  cname: THNN_DoubleLinear_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
]]


TH_API void THNN_FloatLinear_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double);
[[
  name: FloatLinear_accGradParameters
  return: void
  cname: THNN_FloatLinear_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* addBuffer
    - double scale
]]


TH_API void THNN_DoubleLinear_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double);
[[
  name: DoubleLinear_accGradParameters
  return: void
  cname: THNN_DoubleLinear_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* addBuffer
    - double scale
]]


TH_API void THNN_FloatRReLU_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double, bool, bool, THGenerator*);
[[
  name: FloatRReLU_updateOutput
  return: void
  cname: THNN_FloatRReLU_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* noise
    - double lower
    - double upper
    - bool train
    - bool inplace
    - THGenerator* generator
]]


TH_API void THNN_DoubleRReLU_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double, bool, bool, THGenerator*);
[[
  name: DoubleRReLU_updateOutput
  return: void
  cname: THNN_DoubleRReLU_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* noise
    - double lower
    - double upper
    - bool train
    - bool inplace
    - THGenerator* generator
]]


TH_API void THNN_FloatRReLU_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double, bool, bool);
[[
  name: FloatRReLU_updateGradInput
  return: void
  cname: THNN_FloatRReLU_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* noise
    - double lower
    - double upper
    - bool train
    - bool inplace
]]


TH_API void THNN_DoubleRReLU_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double, bool, bool);
[[
  name: DoubleRReLU_updateGradInput
  return: void
  cname: THNN_DoubleRReLU_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* noise
    - double lower
    - double upper
    - bool train
    - bool inplace
]]


TH_API void THNN_FloatSigmoid_updateOutput(void*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSigmoid_updateOutput
  return: void
  cname: THNN_FloatSigmoid_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
]]


TH_API void THNN_DoubleSigmoid_updateOutput(void*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSigmoid_updateOutput
  return: void
  cname: THNN_DoubleSigmoid_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
]]


TH_API void THNN_FloatSigmoid_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSigmoid_updateGradInput
  return: void
  cname: THNN_FloatSigmoid_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* output
]]


TH_API void THNN_DoubleSigmoid_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSigmoid_updateGradInput
  return: void
  cname: THNN_DoubleSigmoid_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* output
]]


TH_API void THNN_FloatSmoothL1Criterion_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatSmoothL1Criterion_updateOutput
  return: void
  cname: THNN_FloatSmoothL1Criterion_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleSmoothL1Criterion_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleSmoothL1Criterion_updateOutput
  return: void
  cname: THNN_DoubleSmoothL1Criterion_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* output
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatSmoothL1Criterion_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, bool);
[[
  name: FloatSmoothL1Criterion_updateGradInput
  return: void
  cname: THNN_FloatSmoothL1Criterion_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* target
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_DoubleSmoothL1Criterion_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, bool);
[[
  name: DoubleSmoothL1Criterion_updateGradInput
  return: void
  cname: THNN_DoubleSmoothL1Criterion_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* target
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - bool sizeAverage
    - bool reduce
]]


TH_API void THNN_FloatSoftPlus_updateOutput(void*, THFloatTensor*, THFloatTensor*, double, double);
[[
  name: FloatSoftPlus_updateOutput
  return: void
  cname: THNN_FloatSoftPlus_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - double beta
    - double threshold
]]


TH_API void THNN_DoubleSoftPlus_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, double, double);
[[
  name: DoubleSoftPlus_updateOutput
  return: void
  cname: THNN_DoubleSoftPlus_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - double beta
    - double threshold
]]


TH_API void THNN_FloatSoftPlus_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double);
[[
  name: FloatSoftPlus_updateGradInput
  return: void
  cname: THNN_FloatSoftPlus_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* output
    - double beta
    - double threshold
]]


TH_API void THNN_DoubleSoftPlus_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double);
[[
  name: DoubleSoftPlus_updateGradInput
  return: void
  cname: THNN_DoubleSoftPlus_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* output
    - double beta
    - double threshold
]]


TH_API void THNN_FloatSoftShrink_updateOutput(void*, THFloatTensor*, THFloatTensor*, double);
[[
  name: FloatSoftShrink_updateOutput
  return: void
  cname: THNN_FloatSoftShrink_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - double lambda
]]


TH_API void THNN_DoubleSoftShrink_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, double);
[[
  name: DoubleSoftShrink_updateOutput
  return: void
  cname: THNN_DoubleSoftShrink_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - double lambda
]]


TH_API void THNN_FloatSoftShrink_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double);
[[
  name: FloatSoftShrink_updateGradInput
  return: void
  cname: THNN_FloatSoftShrink_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - double lambda
]]


TH_API void THNN_DoubleSoftShrink_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double);
[[
  name: DoubleSoftShrink_updateGradInput
  return: void
  cname: THNN_DoubleSoftShrink_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - double lambda
]]


TH_API void THNN_FloatIndexLinear_updateOutput(void*, THLongTensor*, int64_t, THFloatTensor*, THLongTensor*, THLongTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatIndexLinear_updateOutput
  return: void
  cname: THNN_FloatIndexLinear_updateOutput
  arguments:
    - void* state
    - THLongTensor* keys
    - int64_t keysOffset
    - THFloatTensor* values
    - THLongTensor* sizes
    - THLongTensor* cumSumSizes
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* normalizedValues
    - int train
]]


TH_API void THNN_DoubleIndexLinear_updateOutput(void*, THLongTensor*, int64_t, THDoubleTensor*, THLongTensor*, THLongTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleIndexLinear_updateOutput
  return: void
  cname: THNN_DoubleIndexLinear_updateOutput
  arguments:
    - void* state
    - THLongTensor* keys
    - int64_t keysOffset
    - THDoubleTensor* values
    - THLongTensor* sizes
    - THLongTensor* cumSumSizes
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* normalizedValues
    - int train
]]


TH_API void THNN_FloatIndexLinear_accGradParameters(void*, THLongTensor*, int64_t, THFloatTensor*, THLongTensor*, THLongTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double);
[[
  name: FloatIndexLinear_accGradParameters
  return: void
  cname: THNN_FloatIndexLinear_accGradParameters
  arguments:
    - void* state
    - THLongTensor* keys
    - int64_t keysOffset
    - THFloatTensor* values
    - THLongTensor* sizes
    - THLongTensor* cumSumSizes
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* valuesBuffer
    - double weightDecay
    - double scale
]]


TH_API void THNN_DoubleIndexLinear_accGradParameters(void*, THLongTensor*, int64_t, THDoubleTensor*, THLongTensor*, THLongTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double);
[[
  name: DoubleIndexLinear_accGradParameters
  return: void
  cname: THNN_DoubleIndexLinear_accGradParameters
  arguments:
    - void* state
    - THLongTensor* keys
    - int64_t keysOffset
    - THDoubleTensor* values
    - THLongTensor* sizes
    - THLongTensor* cumSumSizes
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* valuesBuffer
    - double weightDecay
    - double scale
]]


TH_API void THNN_FloatIndexLinear_accUpdateGradParameters(void*, THLongTensor*, int64_t, THFloatTensor*, THLongTensor*, THLongTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double);
[[
  name: FloatIndexLinear_accUpdateGradParameters
  return: void
  cname: THNN_FloatIndexLinear_accUpdateGradParameters
  arguments:
    - void* state
    - THLongTensor* keys
    - int64_t keysOffset
    - THFloatTensor* values
    - THLongTensor* sizes
    - THLongTensor* cumSumSizes
    - THFloatTensor* gradOutput
    - THFloatTensor* weight
    - THFloatTensor* bias
    - double weightDecay
    - double scale
]]


TH_API void THNN_DoubleIndexLinear_accUpdateGradParameters(void*, THLongTensor*, int64_t, THDoubleTensor*, THLongTensor*, THLongTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double);
[[
  name: DoubleIndexLinear_accUpdateGradParameters
  return: void
  cname: THNN_DoubleIndexLinear_accUpdateGradParameters
  arguments:
    - void* state
    - THLongTensor* keys
    - int64_t keysOffset
    - THDoubleTensor* values
    - THLongTensor* sizes
    - THLongTensor* cumSumSizes
    - THDoubleTensor* gradOutput
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - double weightDecay
    - double scale
]]


TH_API void THNN_FloatIndexLinear_updateParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*, THLongTensor*, int64_t, double, double);
[[
  name: FloatIndexLinear_updateParameters
  return: void
  cname: THNN_FloatIndexLinear_updateParameters
  arguments:
    - void* state
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THLongTensor* runningKeys
    - THLongTensor* cumSumSizes
    - int64_t keysOffset
    - double weightDecay
    - double learningRate
]]


TH_API void THNN_DoubleIndexLinear_updateParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, THLongTensor*, int64_t, double, double);
[[
  name: DoubleIndexLinear_updateParameters
  return: void
  cname: THNN_DoubleIndexLinear_updateParameters
  arguments:
    - void* state
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THLongTensor* runningKeys
    - THLongTensor* cumSumSizes
    - int64_t keysOffset
    - double weightDecay
    - double learningRate
]]


TH_API void THNN_FloatSparseLinear_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSparseLinear_updateOutput
  return: void
  cname: THNN_FloatSparseLinear_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
]]


TH_API void THNN_DoubleSparseLinear_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSparseLinear_updateOutput
  return: void
  cname: THNN_DoubleSparseLinear_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
]]


TH_API void THNN_FloatSparseLinear_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double);
[[
  name: FloatSparseLinear_accGradParameters
  return: void
  cname: THNN_FloatSparseLinear_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* weight
    - THFloatTensor* bias
    - double weightDecay
    - double scale
]]


TH_API void THNN_DoubleSparseLinear_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double);
[[
  name: DoubleSparseLinear_accGradParameters
  return: void
  cname: THNN_DoubleSparseLinear_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - double weightDecay
    - double scale
]]


TH_API void THNN_FloatSparseLinear_zeroGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSparseLinear_zeroGradParameters
  return: void
  cname: THNN_FloatSparseLinear_zeroGradParameters
  arguments:
    - void* state
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* lastInput
]]


TH_API void THNN_DoubleSparseLinear_zeroGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSparseLinear_zeroGradParameters
  return: void
  cname: THNN_DoubleSparseLinear_zeroGradParameters
  arguments:
    - void* state
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* lastInput
]]


TH_API void THNN_FloatSparseLinear_updateParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double);
[[
  name: FloatSparseLinear_updateParameters
  return: void
  cname: THNN_FloatSparseLinear_updateParameters
  arguments:
    - void* state
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* lastInput
    - double learningRate
]]


TH_API void THNN_DoubleSparseLinear_updateParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double);
[[
  name: DoubleSparseLinear_updateParameters
  return: void
  cname: THNN_DoubleSparseLinear_updateParameters
  arguments:
    - void* state
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* lastInput
    - double learningRate
]]


TH_API void THNN_FloatSparseLinear_legacyUpdateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSparseLinear_legacyUpdateOutput
  return: void
  cname: THNN_FloatSparseLinear_legacyUpdateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
]]


TH_API void THNN_DoubleSparseLinear_legacyUpdateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSparseLinear_legacyUpdateOutput
  return: void
  cname: THNN_DoubleSparseLinear_legacyUpdateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
]]


TH_API void THNN_FloatSparseLinear_legacyAccGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double);
[[
  name: FloatSparseLinear_legacyAccGradParameters
  return: void
  cname: THNN_FloatSparseLinear_legacyAccGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* weight
    - THFloatTensor* bias
    - double weightDecay
    - double scale
]]


TH_API void THNN_DoubleSparseLinear_legacyAccGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double);
[[
  name: DoubleSparseLinear_legacyAccGradParameters
  return: void
  cname: THNN_DoubleSparseLinear_legacyAccGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - double weightDecay
    - double scale
]]


TH_API void THNN_FloatSparseLinear_legacyZeroGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSparseLinear_legacyZeroGradParameters
  return: void
  cname: THNN_FloatSparseLinear_legacyZeroGradParameters
  arguments:
    - void* state
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* lastInput
]]


TH_API void THNN_DoubleSparseLinear_legacyZeroGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSparseLinear_legacyZeroGradParameters
  return: void
  cname: THNN_DoubleSparseLinear_legacyZeroGradParameters
  arguments:
    - void* state
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* lastInput
]]


TH_API void THNN_FloatSparseLinear_legacyUpdateParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double);
[[
  name: FloatSparseLinear_legacyUpdateParameters
  return: void
  cname: THNN_FloatSparseLinear_legacyUpdateParameters
  arguments:
    - void* state
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* lastInput
    - double learningRate
]]


TH_API void THNN_DoubleSparseLinear_legacyUpdateParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double);
[[
  name: DoubleSparseLinear_legacyUpdateParameters
  return: void
  cname: THNN_DoubleSparseLinear_legacyUpdateParameters
  arguments:
    - void* state
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* lastInput
    - double learningRate
]]


TH_API void THNN_FloatSqrt_updateOutput(void*, THFloatTensor*, THFloatTensor*, double);
[[
  name: FloatSqrt_updateOutput
  return: void
  cname: THNN_FloatSqrt_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - double eps
]]


TH_API void THNN_DoubleSqrt_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, double);
[[
  name: DoubleSqrt_updateOutput
  return: void
  cname: THNN_DoubleSqrt_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - double eps
]]


TH_API void THNN_FloatSqrt_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSqrt_updateGradInput
  return: void
  cname: THNN_FloatSqrt_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* output
]]


TH_API void THNN_DoubleSqrt_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSqrt_updateGradInput
  return: void
  cname: THNN_DoubleSqrt_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* output
]]


TH_API void THNN_FloatSquare_updateOutput(void*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSquare_updateOutput
  return: void
  cname: THNN_FloatSquare_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
]]


TH_API void THNN_DoubleSquare_updateOutput(void*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSquare_updateOutput
  return: void
  cname: THNN_DoubleSquare_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
]]


TH_API void THNN_FloatSquare_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSquare_updateGradInput
  return: void
  cname: THNN_FloatSquare_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
]]


TH_API void THNN_DoubleSquare_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSquare_updateGradInput
  return: void
  cname: THNN_DoubleSquare_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
]]


TH_API void THNN_FloatTanh_updateOutput(void*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatTanh_updateOutput
  return: void
  cname: THNN_FloatTanh_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
]]


TH_API void THNN_DoubleTanh_updateOutput(void*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleTanh_updateOutput
  return: void
  cname: THNN_DoubleTanh_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
]]


TH_API void THNN_FloatTanh_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatTanh_updateGradInput
  return: void
  cname: THNN_FloatTanh_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* output
]]


TH_API void THNN_DoubleTanh_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleTanh_updateGradInput
  return: void
  cname: THNN_DoubleTanh_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* output
]]


TH_API void THNN_FloatThreshold_updateOutput(void*, THFloatTensor*, THFloatTensor*, double, double, bool);
[[
  name: FloatThreshold_updateOutput
  return: void
  cname: THNN_FloatThreshold_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - double threshold
    - double val
    - bool inplace
]]


TH_API void THNN_DoubleThreshold_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, double, double, bool);
[[
  name: DoubleThreshold_updateOutput
  return: void
  cname: THNN_DoubleThreshold_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - double threshold
    - double val
    - bool inplace
]]


TH_API void THNN_FloatThreshold_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, double, bool);
[[
  name: FloatThreshold_updateGradInput
  return: void
  cname: THNN_FloatThreshold_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - double threshold
    - double val
    - bool inplace
]]


TH_API void THNN_DoubleThreshold_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, double, bool);
[[
  name: DoubleThreshold_updateGradInput
  return: void
  cname: THNN_DoubleThreshold_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - double threshold
    - double val
    - bool inplace
]]


TH_API void THNN_FloatTemporalConvolution_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatTemporalConvolution_updateOutput
  return: void
  cname: THNN_FloatTemporalConvolution_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
    - int kW
    - int dW
    - int inputFrameSize
    - int outputFrameSize
]]


TH_API void THNN_DoubleTemporalConvolution_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleTemporalConvolution_updateOutput
  return: void
  cname: THNN_DoubleTemporalConvolution_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - int kW
    - int dW
    - int inputFrameSize
    - int outputFrameSize
]]


TH_API void THNN_FloatTemporalConvolution_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int);
[[
  name: FloatTemporalConvolution_updateGradInput
  return: void
  cname: THNN_FloatTemporalConvolution_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - int kW
    - int dW
]]


TH_API void THNN_DoubleTemporalConvolution_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int);
[[
  name: DoubleTemporalConvolution_updateGradInput
  return: void
  cname: THNN_DoubleTemporalConvolution_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - int kW
    - int dW
]]


TH_API void THNN_FloatTemporalConvolution_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, double);
[[
  name: FloatTemporalConvolution_accGradParameters
  return: void
  cname: THNN_FloatTemporalConvolution_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - int kW
    - int dW
    - double scale
]]


TH_API void THNN_DoubleTemporalConvolution_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, double);
[[
  name: DoubleTemporalConvolution_accGradParameters
  return: void
  cname: THNN_DoubleTemporalConvolution_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - int kW
    - int dW
    - double scale
]]


TH_API void THNN_FloatTemporalMaxPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int);
[[
  name: FloatTemporalMaxPooling_updateOutput
  return: void
  cname: THNN_FloatTemporalMaxPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THLongTensor* indices
    - int kW
    - int dW
]]


TH_API void THNN_DoubleTemporalMaxPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int);
[[
  name: DoubleTemporalMaxPooling_updateOutput
  return: void
  cname: THNN_DoubleTemporalMaxPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THLongTensor* indices
    - int kW
    - int dW
]]


TH_API void THNN_FloatTemporalMaxPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int);
[[
  name: FloatTemporalMaxPooling_updateGradInput
  return: void
  cname: THNN_FloatTemporalMaxPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THLongTensor* indices
    - int kW
    - int dW
]]


TH_API void THNN_DoubleTemporalMaxPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int);
[[
  name: DoubleTemporalMaxPooling_updateGradInput
  return: void
  cname: THNN_DoubleTemporalMaxPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THLongTensor* indices
    - int kW
    - int dW
]]


TH_API void THNN_FloatTemporalSubSampling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int);
[[
  name: FloatTemporalSubSampling_updateOutput
  return: void
  cname: THNN_FloatTemporalSubSampling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
    - int kW
    - int dW
    - int inputFrameSize
]]


TH_API void THNN_DoubleTemporalSubSampling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int);
[[
  name: DoubleTemporalSubSampling_updateOutput
  return: void
  cname: THNN_DoubleTemporalSubSampling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - int kW
    - int dW
    - int inputFrameSize
]]


TH_API void THNN_FloatTemporalSubSampling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int);
[[
  name: FloatTemporalSubSampling_updateGradInput
  return: void
  cname: THNN_FloatTemporalSubSampling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - int kW
    - int dW
]]


TH_API void THNN_DoubleTemporalSubSampling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int);
[[
  name: DoubleTemporalSubSampling_updateGradInput
  return: void
  cname: THNN_DoubleTemporalSubSampling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - int kW
    - int dW
]]


TH_API void THNN_FloatTemporalSubSampling_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, double);
[[
  name: FloatTemporalSubSampling_accGradParameters
  return: void
  cname: THNN_FloatTemporalSubSampling_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - int kW
    - int dW
    - double scale
]]


TH_API void THNN_DoubleTemporalSubSampling_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, double);
[[
  name: DoubleTemporalSubSampling_accGradParameters
  return: void
  cname: THNN_DoubleTemporalSubSampling_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - int kW
    - int dW
    - double scale
]]


TH_API void THNN_FloatTemporalRowConvolution_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, bool);
[[
  name: FloatTemporalRowConvolution_updateOutput
  return: void
  cname: THNN_FloatTemporalRowConvolution_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kW
    - int dW
    - int padW
    - bool featFirst
]]


TH_API void THNN_DoubleTemporalRowConvolution_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, bool);
[[
  name: DoubleTemporalRowConvolution_updateOutput
  return: void
  cname: THNN_DoubleTemporalRowConvolution_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kW
    - int dW
    - int padW
    - bool featFirst
]]


TH_API void THNN_FloatTemporalRowConvolution_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, bool);
[[
  name: FloatTemporalRowConvolution_updateGradInput
  return: void
  cname: THNN_FloatTemporalRowConvolution_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kW
    - int dW
    - int padW
    - bool featFirst
]]


TH_API void THNN_DoubleTemporalRowConvolution_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, bool);
[[
  name: DoubleTemporalRowConvolution_updateGradInput
  return: void
  cname: THNN_DoubleTemporalRowConvolution_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kW
    - int dW
    - int padW
    - bool featFirst
]]


TH_API void THNN_FloatTemporalRowConvolution_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, bool, double);
[[
  name: FloatTemporalRowConvolution_accGradParameters
  return: void
  cname: THNN_FloatTemporalRowConvolution_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kW
    - int dW
    - int padW
    - bool featFirst
    - double scale
]]


TH_API void THNN_DoubleTemporalRowConvolution_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, bool, double);
[[
  name: DoubleTemporalRowConvolution_accGradParameters
  return: void
  cname: THNN_DoubleTemporalRowConvolution_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kW
    - int dW
    - int padW
    - bool featFirst
    - double scale
]]


TH_API void THNN_FloatTemporalUpSamplingNearest_updateOutput(void*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatTemporalUpSamplingNearest_updateOutput
  return: void
  cname: THNN_FloatTemporalUpSamplingNearest_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int scale_factor
]]


TH_API void THNN_DoubleTemporalUpSamplingNearest_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleTemporalUpSamplingNearest_updateOutput
  return: void
  cname: THNN_DoubleTemporalUpSamplingNearest_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int scale_factor
]]


TH_API void THNN_FloatTemporalUpSamplingNearest_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatTemporalUpSamplingNearest_updateGradInput
  return: void
  cname: THNN_FloatTemporalUpSamplingNearest_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int scale_factor
]]


TH_API void THNN_DoubleTemporalUpSamplingNearest_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleTemporalUpSamplingNearest_updateGradInput
  return: void
  cname: THNN_DoubleTemporalUpSamplingNearest_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int scale_factor
]]


TH_API void THNN_FloatTemporalUpSamplingLinear_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, bool);
[[
  name: FloatTemporalUpSamplingLinear_updateOutput
  return: void
  cname: THNN_FloatTemporalUpSamplingLinear_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_DoubleTemporalUpSamplingLinear_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, bool);
[[
  name: DoubleTemporalUpSamplingLinear_updateOutput
  return: void
  cname: THNN_DoubleTemporalUpSamplingLinear_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_FloatTemporalUpSamplingLinear_updateGradInput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, bool);
[[
  name: FloatTemporalUpSamplingLinear_updateGradInput
  return: void
  cname: THNN_FloatTemporalUpSamplingLinear_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int isizeB
    - int isizeC
    - int isizeW
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_DoubleTemporalUpSamplingLinear_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, bool);
[[
  name: DoubleTemporalUpSamplingLinear_updateGradInput
  return: void
  cname: THNN_DoubleTemporalUpSamplingLinear_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int isizeB
    - int isizeC
    - int isizeW
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_FloatBatchNormalization_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, double, double);
[[
  name: FloatBatchNormalization_updateOutput
  return: void
  cname: THNN_FloatBatchNormalization_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - type: THFloatTensor*
      name: weight
      nullable: True
    - type: THFloatTensor*
      name: bias
      nullable: True
    - type: THFloatTensor*
      name: running_mean
      nullable: True
    - type: THFloatTensor*
      name: running_var
      nullable: True
    - THFloatTensor* save_mean
    - THFloatTensor* save_std
    - bool train
    - double momentum
    - double eps
]]


TH_API void THNN_DoubleBatchNormalization_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, double, double);
[[
  name: DoubleBatchNormalization_updateOutput
  return: void
  cname: THNN_DoubleBatchNormalization_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - type: THDoubleTensor*
      name: weight
      nullable: True
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - type: THDoubleTensor*
      name: running_mean
      nullable: True
    - type: THDoubleTensor*
      name: running_var
      nullable: True
    - THDoubleTensor* save_mean
    - THDoubleTensor* save_std
    - bool train
    - double momentum
    - double eps
]]


TH_API void THNN_FloatBatchNormalization_backward(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, bool, double, double);
[[
  name: FloatBatchNormalization_backward
  return: void
  cname: THNN_FloatBatchNormalization_backward
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - type: THFloatTensor*
      name: gradInput
      nullable: True
    - type: THFloatTensor*
      name: gradWeight
      nullable: True
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - type: THFloatTensor*
      name: weight
      nullable: True
    - type: THFloatTensor*
      name: running_mean
      nullable: True
    - type: THFloatTensor*
      name: running_var
      nullable: True
    - type: THFloatTensor*
      name: save_mean
      nullable: True
    - type: THFloatTensor*
      name: save_std
      nullable: True
    - bool train
    - double scale
    - double eps
]]


TH_API void THNN_DoubleBatchNormalization_backward(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, bool, double, double);
[[
  name: DoubleBatchNormalization_backward
  return: void
  cname: THNN_DoubleBatchNormalization_backward
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - type: THDoubleTensor*
      name: gradInput
      nullable: True
    - type: THDoubleTensor*
      name: gradWeight
      nullable: True
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - type: THDoubleTensor*
      name: weight
      nullable: True
    - type: THDoubleTensor*
      name: running_mean
      nullable: True
    - type: THDoubleTensor*
      name: running_var
      nullable: True
    - type: THDoubleTensor*
      name: save_mean
      nullable: True
    - type: THDoubleTensor*
      name: save_std
      nullable: True
    - bool train
    - double scale
    - double eps
]]


TH_API void THNN_FloatSpatialConvolutionMap_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialConvolutionMap_updateOutput
  return: void
  cname: THNN_FloatSpatialConvolutionMap_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
]]


TH_API void THNN_DoubleSpatialConvolutionMap_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialConvolutionMap_updateOutput
  return: void
  cname: THNN_DoubleSpatialConvolutionMap_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
]]


TH_API void THNN_FloatSpatialConvolutionMap_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialConvolutionMap_updateGradInput
  return: void
  cname: THNN_FloatSpatialConvolutionMap_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
]]


TH_API void THNN_DoubleSpatialConvolutionMap_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialConvolutionMap_updateGradInput
  return: void
  cname: THNN_DoubleSpatialConvolutionMap_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
]]


TH_API void THNN_FloatSpatialConvolutionMap_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, double);
[[
  name: FloatSpatialConvolutionMap_accGradParameters
  return: void
  cname: THNN_FloatSpatialConvolutionMap_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
    - double scale
]]


TH_API void THNN_DoubleSpatialConvolutionMap_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, double);
[[
  name: DoubleSpatialConvolutionMap_accGradParameters
  return: void
  cname: THNN_DoubleSpatialConvolutionMap_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
    - double scale
]]


TH_API void THNN_FloatSpatialConvolutionMM_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int);
[[
  name: FloatSpatialConvolutionMM_updateOutput
  return: void
  cname: THNN_FloatSpatialConvolutionMM_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - type: THFloatTensor*
      name: bias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
]]


TH_API void THNN_DoubleSpatialConvolutionMM_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int);
[[
  name: DoubleSpatialConvolutionMM_updateOutput
  return: void
  cname: THNN_DoubleSpatialConvolutionMM_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
]]


TH_API void THNN_FloatSpatialConvolutionMM_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int);
[[
  name: FloatSpatialConvolutionMM_updateGradInput
  return: void
  cname: THNN_FloatSpatialConvolutionMM_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
]]


TH_API void THNN_DoubleSpatialConvolutionMM_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int);
[[
  name: DoubleSpatialConvolutionMM_updateGradInput
  return: void
  cname: THNN_DoubleSpatialConvolutionMM_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
]]


TH_API void THNN_FloatSpatialConvolutionMM_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, double);
[[
  name: FloatSpatialConvolutionMM_accGradParameters
  return: void
  cname: THNN_FloatSpatialConvolutionMM_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - double scale
]]


TH_API void THNN_DoubleSpatialConvolutionMM_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, double);
[[
  name: DoubleSpatialConvolutionMM_accGradParameters
  return: void
  cname: THNN_DoubleSpatialConvolutionMM_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - double scale
]]


TH_API void THNN_FloatSpatialConvolutionLocal_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int64_t, int64_t, int64_t, int64_t);
[[
  name: FloatSpatialConvolutionLocal_updateOutput
  return: void
  cname: THNN_FloatSpatialConvolutionLocal_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int64_t inputWidth
    - int64_t inputHeight
    - int64_t outputWidth
    - int64_t outputHeight
]]


TH_API void THNN_DoubleSpatialConvolutionLocal_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int64_t, int64_t, int64_t, int64_t);
[[
  name: DoubleSpatialConvolutionLocal_updateOutput
  return: void
  cname: THNN_DoubleSpatialConvolutionLocal_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int64_t inputWidth
    - int64_t inputHeight
    - int64_t outputWidth
    - int64_t outputHeight
]]


TH_API void THNN_FloatSpatialConvolutionLocal_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int64_t, int64_t, int64_t, int64_t);
[[
  name: FloatSpatialConvolutionLocal_updateGradInput
  return: void
  cname: THNN_FloatSpatialConvolutionLocal_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int64_t inputWidth
    - int64_t inputHeight
    - int64_t outputWidth
    - int64_t outputHeight
]]


TH_API void THNN_DoubleSpatialConvolutionLocal_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int64_t, int64_t, int64_t, int64_t);
[[
  name: DoubleSpatialConvolutionLocal_updateGradInput
  return: void
  cname: THNN_DoubleSpatialConvolutionLocal_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int64_t inputWidth
    - int64_t inputHeight
    - int64_t outputWidth
    - int64_t outputHeight
]]


TH_API void THNN_FloatSpatialConvolutionLocal_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int64_t, int64_t, int64_t, int64_t, double);
[[
  name: FloatSpatialConvolutionLocal_accGradParameters
  return: void
  cname: THNN_FloatSpatialConvolutionLocal_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int64_t inputWidth
    - int64_t inputHeight
    - int64_t outputWidth
    - int64_t outputHeight
    - double scale
]]


TH_API void THNN_DoubleSpatialConvolutionLocal_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int64_t, int64_t, int64_t, int64_t, double);
[[
  name: DoubleSpatialConvolutionLocal_accGradParameters
  return: void
  cname: THNN_DoubleSpatialConvolutionLocal_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int64_t inputWidth
    - int64_t inputHeight
    - int64_t outputWidth
    - int64_t outputHeight
    - double scale
]]


TH_API void THNN_FloatSpatialAdaptiveMaxPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int);
[[
  name: FloatSpatialAdaptiveMaxPooling_updateOutput
  return: void
  cname: THNN_FloatSpatialAdaptiveMaxPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THLongTensor* indices
    - int osizeW
    - int osizeH
]]


TH_API void THNN_DoubleSpatialAdaptiveMaxPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int);
[[
  name: DoubleSpatialAdaptiveMaxPooling_updateOutput
  return: void
  cname: THNN_DoubleSpatialAdaptiveMaxPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THLongTensor* indices
    - int osizeW
    - int osizeH
]]


TH_API void THNN_FloatSpatialAdaptiveMaxPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*);
[[
  name: FloatSpatialAdaptiveMaxPooling_updateGradInput
  return: void
  cname: THNN_FloatSpatialAdaptiveMaxPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THLongTensor* indices
]]


TH_API void THNN_DoubleSpatialAdaptiveMaxPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*);
[[
  name: DoubleSpatialAdaptiveMaxPooling_updateGradInput
  return: void
  cname: THNN_DoubleSpatialAdaptiveMaxPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THLongTensor* indices
]]


TH_API void THNN_FloatSpatialAdaptiveAveragePooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int);
[[
  name: FloatSpatialAdaptiveAveragePooling_updateOutput
  return: void
  cname: THNN_FloatSpatialAdaptiveAveragePooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int osizeW
    - int osizeH
]]


TH_API void THNN_DoubleSpatialAdaptiveAveragePooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int);
[[
  name: DoubleSpatialAdaptiveAveragePooling_updateOutput
  return: void
  cname: THNN_DoubleSpatialAdaptiveAveragePooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int osizeW
    - int osizeH
]]


TH_API void THNN_FloatSpatialAdaptiveAveragePooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatSpatialAdaptiveAveragePooling_updateGradInput
  return: void
  cname: THNN_FloatSpatialAdaptiveAveragePooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
]]


TH_API void THNN_DoubleSpatialAdaptiveAveragePooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleSpatialAdaptiveAveragePooling_updateGradInput
  return: void
  cname: THNN_DoubleSpatialAdaptiveAveragePooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
]]


TH_API void THNN_FloatSpatialAveragePooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, bool, bool);
[[
  name: FloatSpatialAveragePooling_updateOutput
  return: void
  cname: THNN_FloatSpatialAveragePooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - bool ceil_mode
    - bool count_include_pad
]]


TH_API void THNN_DoubleSpatialAveragePooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, bool, bool);
[[
  name: DoubleSpatialAveragePooling_updateOutput
  return: void
  cname: THNN_DoubleSpatialAveragePooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - bool ceil_mode
    - bool count_include_pad
]]


TH_API void THNN_FloatSpatialAveragePooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, bool, bool);
[[
  name: FloatSpatialAveragePooling_updateGradInput
  return: void
  cname: THNN_FloatSpatialAveragePooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - bool ceil_mode
    - bool count_include_pad
]]


TH_API void THNN_DoubleSpatialAveragePooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, bool, bool);
[[
  name: DoubleSpatialAveragePooling_updateGradInput
  return: void
  cname: THNN_DoubleSpatialAveragePooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - bool ceil_mode
    - bool count_include_pad
]]


TH_API void THNN_FloatSpatialFractionalMaxPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, THLongTensor*, THFloatTensor*);
[[
  name: FloatSpatialFractionalMaxPooling_updateOutput
  return: void
  cname: THNN_FloatSpatialFractionalMaxPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int outputW
    - int outputH
    - int kW
    - int kH
    - THLongTensor* indices
    - THFloatTensor* randomSamples
]]


TH_API void THNN_DoubleSpatialFractionalMaxPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, THLongTensor*, THDoubleTensor*);
[[
  name: DoubleSpatialFractionalMaxPooling_updateOutput
  return: void
  cname: THNN_DoubleSpatialFractionalMaxPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int outputW
    - int outputH
    - int kW
    - int kH
    - THLongTensor* indices
    - THDoubleTensor* randomSamples
]]


TH_API void THNN_FloatSpatialFractionalMaxPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, THLongTensor*);
[[
  name: FloatSpatialFractionalMaxPooling_updateGradInput
  return: void
  cname: THNN_FloatSpatialFractionalMaxPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int outputW
    - int outputH
    - int kW
    - int kH
    - THLongTensor* indices
]]


TH_API void THNN_DoubleSpatialFractionalMaxPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, THLongTensor*);
[[
  name: DoubleSpatialFractionalMaxPooling_updateGradInput
  return: void
  cname: THNN_DoubleSpatialFractionalMaxPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int outputW
    - int outputH
    - int kW
    - int kH
    - THLongTensor* indices
]]


TH_API void THNN_FloatSpatialFullConvolution_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int);
[[
  name: FloatSpatialFullConvolution_updateOutput
  return: void
  cname: THNN_FloatSpatialFullConvolution_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - type: THFloatTensor*
      name: bias
      nullable: True
    - THFloatTensor* columns
    - THFloatTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int adjW
    - int adjH
]]


TH_API void THNN_DoubleSpatialFullConvolution_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int);
[[
  name: DoubleSpatialFullConvolution_updateOutput
  return: void
  cname: THNN_DoubleSpatialFullConvolution_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - THDoubleTensor* columns
    - THDoubleTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int adjW
    - int adjH
]]


TH_API void THNN_FloatSpatialFullConvolution_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int);
[[
  name: FloatSpatialFullConvolution_updateGradInput
  return: void
  cname: THNN_FloatSpatialFullConvolution_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* columns
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int adjW
    - int adjH
]]


TH_API void THNN_DoubleSpatialFullConvolution_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int);
[[
  name: DoubleSpatialFullConvolution_updateGradInput
  return: void
  cname: THNN_DoubleSpatialFullConvolution_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* columns
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int adjW
    - int adjH
]]


TH_API void THNN_FloatSpatialFullConvolution_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, double);
[[
  name: FloatSpatialFullConvolution_accGradParameters
  return: void
  cname: THNN_FloatSpatialFullConvolution_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - THFloatTensor* columns
    - THFloatTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int adjW
    - int adjH
    - double scale
]]


TH_API void THNN_DoubleSpatialFullConvolution_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, double);
[[
  name: DoubleSpatialFullConvolution_accGradParameters
  return: void
  cname: THNN_DoubleSpatialFullConvolution_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - THDoubleTensor* columns
    - THDoubleTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int adjW
    - int adjH
    - double scale
]]


TH_API void THNN_FloatSpatialFullConvolutionMap_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialFullConvolutionMap_updateOutput
  return: void
  cname: THNN_FloatSpatialFullConvolutionMap_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
]]


TH_API void THNN_DoubleSpatialFullConvolutionMap_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialFullConvolutionMap_updateOutput
  return: void
  cname: THNN_DoubleSpatialFullConvolutionMap_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
]]


TH_API void THNN_FloatSpatialFullConvolutionMap_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialFullConvolutionMap_updateGradInput
  return: void
  cname: THNN_FloatSpatialFullConvolutionMap_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* bias
    - THFloatTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
]]


TH_API void THNN_DoubleSpatialFullConvolutionMap_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialFullConvolutionMap_updateGradInput
  return: void
  cname: THNN_DoubleSpatialFullConvolutionMap_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - THDoubleTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
]]


TH_API void THNN_FloatSpatialFullConvolutionMap_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, double);
[[
  name: FloatSpatialFullConvolutionMap_accGradParameters
  return: void
  cname: THNN_FloatSpatialFullConvolutionMap_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - THFloatTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
    - double scale
]]


TH_API void THNN_DoubleSpatialFullConvolutionMap_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, double);
[[
  name: DoubleSpatialFullConvolutionMap_accGradParameters
  return: void
  cname: THNN_DoubleSpatialFullConvolutionMap_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - THDoubleTensor* connTable
    - int nInputPlane
    - int nOutputPlane
    - int dW
    - int dH
    - double scale
]]


TH_API void THNN_FloatSpatialDilatedConvolution_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int);
[[
  name: FloatSpatialDilatedConvolution_updateOutput
  return: void
  cname: THNN_FloatSpatialDilatedConvolution_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - type: THFloatTensor*
      name: bias
      nullable: True
    - THFloatTensor* columns
    - THFloatTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
]]


TH_API void THNN_DoubleSpatialDilatedConvolution_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int);
[[
  name: DoubleSpatialDilatedConvolution_updateOutput
  return: void
  cname: THNN_DoubleSpatialDilatedConvolution_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - THDoubleTensor* columns
    - THDoubleTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
]]


TH_API void THNN_FloatSpatialDilatedConvolution_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int);
[[
  name: FloatSpatialDilatedConvolution_updateGradInput
  return: void
  cname: THNN_FloatSpatialDilatedConvolution_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* columns
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
]]


TH_API void THNN_DoubleSpatialDilatedConvolution_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int);
[[
  name: DoubleSpatialDilatedConvolution_updateGradInput
  return: void
  cname: THNN_DoubleSpatialDilatedConvolution_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* columns
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
]]


TH_API void THNN_FloatSpatialDilatedConvolution_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, double);
[[
  name: FloatSpatialDilatedConvolution_accGradParameters
  return: void
  cname: THNN_FloatSpatialDilatedConvolution_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - THFloatTensor* columns
    - THFloatTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - double scale
]]


TH_API void THNN_DoubleSpatialDilatedConvolution_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, double);
[[
  name: DoubleSpatialDilatedConvolution_accGradParameters
  return: void
  cname: THNN_DoubleSpatialDilatedConvolution_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - THDoubleTensor* columns
    - THDoubleTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - double scale
]]


TH_API void THNN_FloatSpatialFullDilatedConvolution_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatSpatialFullDilatedConvolution_updateOutput
  return: void
  cname: THNN_FloatSpatialFullDilatedConvolution_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - type: THFloatTensor*
      name: bias
      nullable: True
    - THFloatTensor* columns
    - THFloatTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - int adjW
    - int adjH
]]


TH_API void THNN_DoubleSpatialFullDilatedConvolution_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleSpatialFullDilatedConvolution_updateOutput
  return: void
  cname: THNN_DoubleSpatialFullDilatedConvolution_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - THDoubleTensor* columns
    - THDoubleTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - int adjW
    - int adjH
]]


TH_API void THNN_FloatSpatialFullDilatedConvolution_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatSpatialFullDilatedConvolution_updateGradInput
  return: void
  cname: THNN_FloatSpatialFullDilatedConvolution_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* columns
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - int adjW
    - int adjH
]]


TH_API void THNN_DoubleSpatialFullDilatedConvolution_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleSpatialFullDilatedConvolution_updateGradInput
  return: void
  cname: THNN_DoubleSpatialFullDilatedConvolution_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* columns
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - int adjW
    - int adjH
]]


TH_API void THNN_FloatSpatialFullDilatedConvolution_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, double);
[[
  name: FloatSpatialFullDilatedConvolution_accGradParameters
  return: void
  cname: THNN_FloatSpatialFullDilatedConvolution_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - THFloatTensor* columns
    - THFloatTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - int adjW
    - int adjH
    - double scale
]]


TH_API void THNN_DoubleSpatialFullDilatedConvolution_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, double);
[[
  name: DoubleSpatialFullDilatedConvolution_accGradParameters
  return: void
  cname: THNN_DoubleSpatialFullDilatedConvolution_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - THDoubleTensor* columns
    - THDoubleTensor* ones
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - int adjW
    - int adjH
    - double scale
]]


TH_API void THNN_FloatSpatialMaxPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, bool);
[[
  name: FloatSpatialMaxPooling_updateOutput
  return: void
  cname: THNN_FloatSpatialMaxPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THLongTensor* indices
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - bool ceil_mode
]]


TH_API void THNN_DoubleSpatialMaxPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, bool);
[[
  name: DoubleSpatialMaxPooling_updateOutput
  return: void
  cname: THNN_DoubleSpatialMaxPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THLongTensor* indices
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - bool ceil_mode
]]


TH_API void THNN_FloatSpatialMaxPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, bool);
[[
  name: FloatSpatialMaxPooling_updateGradInput
  return: void
  cname: THNN_FloatSpatialMaxPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THLongTensor* indices
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - bool ceil_mode
]]


TH_API void THNN_DoubleSpatialMaxPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, bool);
[[
  name: DoubleSpatialMaxPooling_updateGradInput
  return: void
  cname: THNN_DoubleSpatialMaxPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THLongTensor* indices
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - bool ceil_mode
]]


TH_API void THNN_FloatSpatialDilatedMaxPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, int, int, bool);
[[
  name: FloatSpatialDilatedMaxPooling_updateOutput
  return: void
  cname: THNN_FloatSpatialDilatedMaxPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THLongTensor* indices
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - bool ceil_mode
]]


TH_API void THNN_DoubleSpatialDilatedMaxPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, int, int, bool);
[[
  name: DoubleSpatialDilatedMaxPooling_updateOutput
  return: void
  cname: THNN_DoubleSpatialDilatedMaxPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THLongTensor* indices
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - bool ceil_mode
]]


TH_API void THNN_FloatSpatialDilatedMaxPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, int, int, bool);
[[
  name: FloatSpatialDilatedMaxPooling_updateGradInput
  return: void
  cname: THNN_FloatSpatialDilatedMaxPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THLongTensor* indices
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - bool ceil_mode
]]


TH_API void THNN_DoubleSpatialDilatedMaxPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, int, int, bool);
[[
  name: DoubleSpatialDilatedMaxPooling_updateGradInput
  return: void
  cname: THNN_DoubleSpatialDilatedMaxPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THLongTensor* indices
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int dilationW
    - int dilationH
    - bool ceil_mode
]]


TH_API void THNN_FloatSpatialMaxUnpooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int);
[[
  name: FloatSpatialMaxUnpooling_updateOutput
  return: void
  cname: THNN_FloatSpatialMaxUnpooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THLongTensor* indices
    - int owidth
    - int oheight
]]


TH_API void THNN_DoubleSpatialMaxUnpooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int);
[[
  name: DoubleSpatialMaxUnpooling_updateOutput
  return: void
  cname: THNN_DoubleSpatialMaxUnpooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THLongTensor* indices
    - int owidth
    - int oheight
]]


TH_API void THNN_FloatSpatialMaxUnpooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int);
[[
  name: FloatSpatialMaxUnpooling_updateGradInput
  return: void
  cname: THNN_FloatSpatialMaxUnpooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THLongTensor* indices
    - int owidth
    - int oheight
]]


TH_API void THNN_DoubleSpatialMaxUnpooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int);
[[
  name: DoubleSpatialMaxUnpooling_updateGradInput
  return: void
  cname: THNN_DoubleSpatialMaxUnpooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THLongTensor* indices
    - int owidth
    - int oheight
]]


TH_API void THNN_FloatSpatialSubSampling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialSubSampling_updateOutput
  return: void
  cname: THNN_FloatSpatialSubSampling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - THFloatTensor* bias
    - int kW
    - int kH
    - int dW
    - int dH
]]


TH_API void THNN_DoubleSpatialSubSampling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialSubSampling_updateOutput
  return: void
  cname: THNN_DoubleSpatialSubSampling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - THDoubleTensor* bias
    - int kW
    - int kH
    - int dW
    - int dH
]]


TH_API void THNN_FloatSpatialSubSampling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialSubSampling_updateGradInput
  return: void
  cname: THNN_FloatSpatialSubSampling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - int kW
    - int kH
    - int dW
    - int dH
]]


TH_API void THNN_DoubleSpatialSubSampling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialSubSampling_updateGradInput
  return: void
  cname: THNN_DoubleSpatialSubSampling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - int kW
    - int kH
    - int dW
    - int dH
]]


TH_API void THNN_FloatSpatialSubSampling_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, double);
[[
  name: FloatSpatialSubSampling_accGradParameters
  return: void
  cname: THNN_FloatSpatialSubSampling_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - THFloatTensor* gradBias
    - int kW
    - int kH
    - int dW
    - int dH
    - double scale
]]


TH_API void THNN_DoubleSpatialSubSampling_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, double);
[[
  name: DoubleSpatialSubSampling_accGradParameters
  return: void
  cname: THNN_DoubleSpatialSubSampling_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - THDoubleTensor* gradBias
    - int kW
    - int kH
    - int dW
    - int dH
    - double scale
]]


TH_API void THNN_FloatSpatialUpSamplingNearest_updateOutput(void*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatSpatialUpSamplingNearest_updateOutput
  return: void
  cname: THNN_FloatSpatialUpSamplingNearest_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int scale_factor
]]


TH_API void THNN_DoubleSpatialUpSamplingNearest_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleSpatialUpSamplingNearest_updateOutput
  return: void
  cname: THNN_DoubleSpatialUpSamplingNearest_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int scale_factor
]]


TH_API void THNN_FloatSpatialUpSamplingNearest_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatSpatialUpSamplingNearest_updateGradInput
  return: void
  cname: THNN_FloatSpatialUpSamplingNearest_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int scale_factor
]]


TH_API void THNN_DoubleSpatialUpSamplingNearest_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleSpatialUpSamplingNearest_updateGradInput
  return: void
  cname: THNN_DoubleSpatialUpSamplingNearest_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int scale_factor
]]


TH_API void THNN_FloatSpatialUpSamplingBilinear_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, bool);
[[
  name: FloatSpatialUpSamplingBilinear_updateOutput
  return: void
  cname: THNN_FloatSpatialUpSamplingBilinear_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int osizeH
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_DoubleSpatialUpSamplingBilinear_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, bool);
[[
  name: DoubleSpatialUpSamplingBilinear_updateOutput
  return: void
  cname: THNN_DoubleSpatialUpSamplingBilinear_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int osizeH
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_FloatSpatialUpSamplingBilinear_updateGradInput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, bool);
[[
  name: FloatSpatialUpSamplingBilinear_updateGradInput
  return: void
  cname: THNN_FloatSpatialUpSamplingBilinear_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int isizeB
    - int isizeC
    - int isizeH
    - int isizeW
    - int osizeH
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_DoubleSpatialUpSamplingBilinear_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, bool);
[[
  name: DoubleSpatialUpSamplingBilinear_updateGradInput
  return: void
  cname: THNN_DoubleSpatialUpSamplingBilinear_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int isizeB
    - int isizeC
    - int isizeH
    - int isizeW
    - int osizeH
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_FloatSpatialGridSamplerBilinear_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatSpatialGridSamplerBilinear_updateOutput
  return: void
  cname: THNN_FloatSpatialGridSamplerBilinear_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* grid
    - THFloatTensor* output
    - int padding_mode
]]


TH_API void THNN_DoubleSpatialGridSamplerBilinear_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleSpatialGridSamplerBilinear_updateOutput
  return: void
  cname: THNN_DoubleSpatialGridSamplerBilinear_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* grid
    - THDoubleTensor* output
    - int padding_mode
]]


TH_API void THNN_FloatSpatialGridSamplerBilinear_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatSpatialGridSamplerBilinear_updateGradInput
  return: void
  cname: THNN_FloatSpatialGridSamplerBilinear_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradInput
    - THFloatTensor* grid
    - THFloatTensor* gradGrid
    - THFloatTensor* gradOutput
    - int padding_mode
]]


TH_API void THNN_DoubleSpatialGridSamplerBilinear_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleSpatialGridSamplerBilinear_updateGradInput
  return: void
  cname: THNN_DoubleSpatialGridSamplerBilinear_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradInput
    - THDoubleTensor* grid
    - THDoubleTensor* gradGrid
    - THDoubleTensor* gradOutput
    - int padding_mode
]]


TH_API void THNN_FloatVolumetricGridSamplerBilinear_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatVolumetricGridSamplerBilinear_updateOutput
  return: void
  cname: THNN_FloatVolumetricGridSamplerBilinear_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* grid
    - THFloatTensor* output
    - int padding_mode
]]


TH_API void THNN_DoubleVolumetricGridSamplerBilinear_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleVolumetricGridSamplerBilinear_updateOutput
  return: void
  cname: THNN_DoubleVolumetricGridSamplerBilinear_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* grid
    - THDoubleTensor* output
    - int padding_mode
]]


TH_API void THNN_FloatVolumetricGridSamplerBilinear_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatVolumetricGridSamplerBilinear_updateGradInput
  return: void
  cname: THNN_FloatVolumetricGridSamplerBilinear_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradInput
    - THFloatTensor* grid
    - THFloatTensor* gradGrid
    - THFloatTensor* gradOutput
    - int padding_mode
]]


TH_API void THNN_DoubleVolumetricGridSamplerBilinear_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleVolumetricGridSamplerBilinear_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricGridSamplerBilinear_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradInput
    - THDoubleTensor* grid
    - THDoubleTensor* gradGrid
    - THDoubleTensor* gradOutput
    - int padding_mode
]]


TH_API void THNN_Floatunfolded_acc(THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: Floatunfolded_acc
  return: void
  cname: THNN_Floatunfolded_acc
  arguments:
    - THFloatTensor* finput
    - THFloatTensor* input
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int nInputPlane
    - int inputWidth
    - int inputHeight
    - int osizeW
    - int outputHeight
]]


TH_API void THNN_Doubleunfolded_acc(THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: Doubleunfolded_acc
  return: void
  cname: THNN_Doubleunfolded_acc
  arguments:
    - THDoubleTensor* finput
    - THDoubleTensor* input
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int nInputPlane
    - int inputWidth
    - int inputHeight
    - int osizeW
    - int outputHeight
]]


TH_API void THNN_Floatunfolded_copy(THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: Floatunfolded_copy
  return: void
  cname: THNN_Floatunfolded_copy
  arguments:
    - THFloatTensor* finput
    - THFloatTensor* input
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int nInputPlane
    - int inputWidth
    - int inputHeight
    - int outputWidth
    - int outputHeight
]]


TH_API void THNN_Doubleunfolded_copy(THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: Doubleunfolded_copy
  return: void
  cname: THNN_Doubleunfolded_copy
  arguments:
    - THDoubleTensor* finput
    - THDoubleTensor* input
    - int kW
    - int kH
    - int dW
    - int dH
    - int padW
    - int padH
    - int nInputPlane
    - int inputWidth
    - int inputHeight
    - int outputWidth
    - int outputHeight
]]


TH_API void THNN_FloatVolumetricAveragePooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, bool, bool);
[[
  name: FloatVolumetricAveragePooling_updateOutput
  return: void
  cname: THNN_FloatVolumetricAveragePooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - bool ceil_mode
    - bool count_include_pad
]]


TH_API void THNN_DoubleVolumetricAveragePooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, bool, bool);
[[
  name: DoubleVolumetricAveragePooling_updateOutput
  return: void
  cname: THNN_DoubleVolumetricAveragePooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - bool ceil_mode
    - bool count_include_pad
]]


TH_API void THNN_FloatVolumetricAveragePooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, bool, bool);
[[
  name: FloatVolumetricAveragePooling_updateGradInput
  return: void
  cname: THNN_FloatVolumetricAveragePooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - bool ceil_mode
    - bool count_include_pad
]]


TH_API void THNN_DoubleVolumetricAveragePooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, bool, bool);
[[
  name: DoubleVolumetricAveragePooling_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricAveragePooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - bool ceil_mode
    - bool count_include_pad
]]


TH_API void THNN_FloatVolumetricConvolution_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int);
[[
  name: FloatVolumetricConvolution_updateOutput
  return: void
  cname: THNN_FloatVolumetricConvolution_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - type: THFloatTensor*
      name: bias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_DoubleVolumetricConvolution_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int);
[[
  name: DoubleVolumetricConvolution_updateOutput
  return: void
  cname: THNN_DoubleVolumetricConvolution_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_FloatVolumetricConvolution_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int);
[[
  name: FloatVolumetricConvolution_updateGradInput
  return: void
  cname: THNN_FloatVolumetricConvolution_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* finput
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_DoubleVolumetricConvolution_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int);
[[
  name: DoubleVolumetricConvolution_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricConvolution_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* finput
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_FloatVolumetricConvolution_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, double);
[[
  name: FloatVolumetricConvolution_accGradParameters
  return: void
  cname: THNN_FloatVolumetricConvolution_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - double scale
]]


TH_API void THNN_DoubleVolumetricConvolution_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, double);
[[
  name: DoubleVolumetricConvolution_accGradParameters
  return: void
  cname: THNN_DoubleVolumetricConvolution_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - double scale
]]


TH_API void THNN_FloatVolumetricConvolutionMM_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricConvolutionMM_updateOutput
  return: void
  cname: THNN_FloatVolumetricConvolutionMM_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - type: THFloatTensor*
      name: bias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_DoubleVolumetricConvolutionMM_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricConvolutionMM_updateOutput
  return: void
  cname: THNN_DoubleVolumetricConvolutionMM_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_FloatVolumetricConvolutionMM_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricConvolutionMM_updateGradInput
  return: void
  cname: THNN_FloatVolumetricConvolutionMM_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_DoubleVolumetricConvolutionMM_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricConvolutionMM_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricConvolutionMM_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_FloatVolumetricConvolutionMM_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, double);
[[
  name: FloatVolumetricConvolutionMM_accGradParameters
  return: void
  cname: THNN_FloatVolumetricConvolutionMM_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - double scale
]]


TH_API void THNN_DoubleVolumetricConvolutionMM_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, double);
[[
  name: DoubleVolumetricConvolutionMM_accGradParameters
  return: void
  cname: THNN_DoubleVolumetricConvolutionMM_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - double scale
]]


TH_API void THNN_FloatVolumetricFractionalMaxPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, THLongTensor*, THFloatTensor*);
[[
  name: FloatVolumetricFractionalMaxPooling_updateOutput
  return: void
  cname: THNN_FloatVolumetricFractionalMaxPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int outputT
    - int outputW
    - int outputH
    - int poolSizeT
    - int poolSizeW
    - int poolSizeH
    - THLongTensor* indices
    - THFloatTensor* randomSamples
]]


TH_API void THNN_DoubleVolumetricFractionalMaxPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, THLongTensor*, THDoubleTensor*);
[[
  name: DoubleVolumetricFractionalMaxPooling_updateOutput
  return: void
  cname: THNN_DoubleVolumetricFractionalMaxPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int outputT
    - int outputW
    - int outputH
    - int poolSizeT
    - int poolSizeW
    - int poolSizeH
    - THLongTensor* indices
    - THDoubleTensor* randomSamples
]]


TH_API void THNN_FloatVolumetricFractionalMaxPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, THLongTensor*);
[[
  name: FloatVolumetricFractionalMaxPooling_updateGradInput
  return: void
  cname: THNN_FloatVolumetricFractionalMaxPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int outputT
    - int outputW
    - int outputH
    - int poolSizeT
    - int poolSizeW
    - int poolSizeH
    - THLongTensor* indices
]]


TH_API void THNN_DoubleVolumetricFractionalMaxPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, THLongTensor*);
[[
  name: DoubleVolumetricFractionalMaxPooling_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricFractionalMaxPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int outputT
    - int outputW
    - int outputH
    - int poolSizeT
    - int poolSizeW
    - int poolSizeH
    - THLongTensor* indices
]]


TH_API void THNN_FloatVolumetricFullConvolution_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricFullConvolution_updateOutput
  return: void
  cname: THNN_FloatVolumetricFullConvolution_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - type: THFloatTensor*
      name: bias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int aT
    - int aW
    - int aH
]]


TH_API void THNN_DoubleVolumetricFullConvolution_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricFullConvolution_updateOutput
  return: void
  cname: THNN_DoubleVolumetricFullConvolution_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int aT
    - int aW
    - int aH
]]


TH_API void THNN_FloatVolumetricFullConvolution_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricFullConvolution_updateGradInput
  return: void
  cname: THNN_FloatVolumetricFullConvolution_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int aT
    - int aW
    - int aH
]]


TH_API void THNN_DoubleVolumetricFullConvolution_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricFullConvolution_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricFullConvolution_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int aT
    - int aW
    - int aH
]]


TH_API void THNN_FloatVolumetricFullConvolution_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int, int, double);
[[
  name: FloatVolumetricFullConvolution_accGradParameters
  return: void
  cname: THNN_FloatVolumetricFullConvolution_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int aT
    - int aW
    - int aH
    - double scale
]]


TH_API void THNN_DoubleVolumetricFullConvolution_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int, int, double);
[[
  name: DoubleVolumetricFullConvolution_accGradParameters
  return: void
  cname: THNN_DoubleVolumetricFullConvolution_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int aT
    - int aW
    - int aH
    - double scale
]]


TH_API void THNN_FloatVolumetricDilatedConvolution_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricDilatedConvolution_updateOutput
  return: void
  cname: THNN_FloatVolumetricDilatedConvolution_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - type: THFloatTensor*
      name: bias
      nullable: True
    - THFloatTensor* columns
    - THFloatTensor* ones
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - int dilationT
    - int dilationW
    - int dilationH
]]


TH_API void THNN_DoubleVolumetricDilatedConvolution_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricDilatedConvolution_updateOutput
  return: void
  cname: THNN_DoubleVolumetricDilatedConvolution_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - THDoubleTensor* columns
    - THDoubleTensor* ones
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - int dilationT
    - int dilationW
    - int dilationH
]]


TH_API void THNN_FloatVolumetricDilatedConvolution_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricDilatedConvolution_updateGradInput
  return: void
  cname: THNN_FloatVolumetricDilatedConvolution_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* columns
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - int dilationT
    - int dilationW
    - int dilationH
]]


TH_API void THNN_DoubleVolumetricDilatedConvolution_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricDilatedConvolution_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricDilatedConvolution_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* columns
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - int dilationT
    - int dilationW
    - int dilationH
]]


TH_API void THNN_FloatVolumetricDilatedConvolution_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int, int, double);
[[
  name: FloatVolumetricDilatedConvolution_accGradParameters
  return: void
  cname: THNN_FloatVolumetricDilatedConvolution_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - THFloatTensor* columns
    - THFloatTensor* ones
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - int dilationT
    - int dilationW
    - int dilationH
    - double scale
]]


TH_API void THNN_DoubleVolumetricDilatedConvolution_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int, int, double);
[[
  name: DoubleVolumetricDilatedConvolution_accGradParameters
  return: void
  cname: THNN_DoubleVolumetricDilatedConvolution_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - THDoubleTensor* columns
    - THDoubleTensor* ones
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int padT
    - int padW
    - int padH
    - int dilationT
    - int dilationW
    - int dilationH
    - double scale
]]


TH_API void THNN_FloatVolumetricFullDilatedConvolution_updateOutput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricFullDilatedConvolution_updateOutput
  return: void
  cname: THNN_FloatVolumetricFullDilatedConvolution_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* weight
    - type: THFloatTensor*
      name: bias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - int aT
    - int aW
    - int aH
]]


TH_API void THNN_DoubleVolumetricFullDilatedConvolution_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricFullDilatedConvolution_updateOutput
  return: void
  cname: THNN_DoubleVolumetricFullDilatedConvolution_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* weight
    - type: THDoubleTensor*
      name: bias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - int aT
    - int aW
    - int aH
]]


TH_API void THNN_FloatVolumetricFullDilatedConvolution_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricFullDilatedConvolution_updateGradInput
  return: void
  cname: THNN_FloatVolumetricFullDilatedConvolution_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THFloatTensor* weight
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - int aT
    - int aW
    - int aH
]]


TH_API void THNN_DoubleVolumetricFullDilatedConvolution_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricFullDilatedConvolution_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricFullDilatedConvolution_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THDoubleTensor* weight
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - int aT
    - int aW
    - int aH
]]


TH_API void THNN_FloatVolumetricFullDilatedConvolution_accGradParameters(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, double);
[[
  name: FloatVolumetricFullDilatedConvolution_accGradParameters
  return: void
  cname: THNN_FloatVolumetricFullDilatedConvolution_accGradParameters
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradWeight
    - type: THFloatTensor*
      name: gradBias
      nullable: True
    - THFloatTensor* finput
    - THFloatTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - int aT
    - int aW
    - int aH
    - double scale
]]


TH_API void THNN_DoubleVolumetricFullDilatedConvolution_accGradParameters(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, double);
[[
  name: DoubleVolumetricFullDilatedConvolution_accGradParameters
  return: void
  cname: THNN_DoubleVolumetricFullDilatedConvolution_accGradParameters
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradWeight
    - type: THDoubleTensor*
      name: gradBias
      nullable: True
    - THDoubleTensor* finput
    - THDoubleTensor* fgradInput
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - int aT
    - int aW
    - int aH
    - double scale
]]


TH_API void THNN_FloatVolumetricMaxPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int, bool);
[[
  name: FloatVolumetricMaxPooling_updateOutput
  return: void
  cname: THNN_FloatVolumetricMaxPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THLongTensor* indices
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - bool ceilMode
]]


TH_API void THNN_DoubleVolumetricMaxPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int, bool);
[[
  name: DoubleVolumetricMaxPooling_updateOutput
  return: void
  cname: THNN_DoubleVolumetricMaxPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THLongTensor* indices
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - bool ceilMode
]]


TH_API void THNN_FloatVolumetricMaxPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int, bool);
[[
  name: FloatVolumetricMaxPooling_updateGradInput
  return: void
  cname: THNN_FloatVolumetricMaxPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THLongTensor* indices
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - bool ceilMode
]]


TH_API void THNN_DoubleVolumetricMaxPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int, bool);
[[
  name: DoubleVolumetricMaxPooling_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricMaxPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THLongTensor* indices
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - bool ceilMode
]]


TH_API void THNN_FloatVolumetricDilatedMaxPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int, int, int, int, bool);
[[
  name: FloatVolumetricDilatedMaxPooling_updateOutput
  return: void
  cname: THNN_FloatVolumetricDilatedMaxPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THLongTensor* indices
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - bool ceilMode
]]


TH_API void THNN_DoubleVolumetricDilatedMaxPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int, int, int, int, bool);
[[
  name: DoubleVolumetricDilatedMaxPooling_updateOutput
  return: void
  cname: THNN_DoubleVolumetricDilatedMaxPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THLongTensor* indices
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - bool ceilMode
]]


TH_API void THNN_FloatVolumetricDilatedMaxPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int, int, int, int, bool);
[[
  name: FloatVolumetricDilatedMaxPooling_updateGradInput
  return: void
  cname: THNN_FloatVolumetricDilatedMaxPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THLongTensor* indices
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - bool ceilMode
]]


TH_API void THNN_DoubleVolumetricDilatedMaxPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int, int, int, int, bool);
[[
  name: DoubleVolumetricDilatedMaxPooling_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricDilatedMaxPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THLongTensor* indices
    - int kT
    - int kW
    - int kH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
    - int dilationT
    - int dilationW
    - int dilationH
    - bool ceilMode
]]


TH_API void THNN_FloatVolumetricMaxUnpooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricMaxUnpooling_updateOutput
  return: void
  cname: THNN_FloatVolumetricMaxUnpooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THLongTensor* indices
    - int oT
    - int oW
    - int oH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_DoubleVolumetricMaxUnpooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricMaxUnpooling_updateOutput
  return: void
  cname: THNN_DoubleVolumetricMaxUnpooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THLongTensor* indices
    - int oT
    - int oW
    - int oH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_FloatVolumetricMaxUnpooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int);
[[
  name: FloatVolumetricMaxUnpooling_updateGradInput
  return: void
  cname: THNN_FloatVolumetricMaxUnpooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THLongTensor* indices
    - int oT
    - int oW
    - int oH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_DoubleVolumetricMaxUnpooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int, int, int, int, int, int, int);
[[
  name: DoubleVolumetricMaxUnpooling_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricMaxUnpooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THLongTensor* indices
    - int oT
    - int oW
    - int oH
    - int dT
    - int dW
    - int dH
    - int pT
    - int pW
    - int pH
]]


TH_API void THNN_FloatVolumetricAdaptiveAveragePooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int);
[[
  name: FloatVolumetricAdaptiveAveragePooling_updateOutput
  return: void
  cname: THNN_FloatVolumetricAdaptiveAveragePooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int osizeT
    - int osizeW
    - int osizeH
]]


TH_API void THNN_DoubleVolumetricAdaptiveAveragePooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int);
[[
  name: DoubleVolumetricAdaptiveAveragePooling_updateOutput
  return: void
  cname: THNN_DoubleVolumetricAdaptiveAveragePooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int osizeT
    - int osizeW
    - int osizeH
]]


TH_API void THNN_FloatVolumetricAdaptiveAveragePooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*);
[[
  name: FloatVolumetricAdaptiveAveragePooling_updateGradInput
  return: void
  cname: THNN_FloatVolumetricAdaptiveAveragePooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
]]


TH_API void THNN_DoubleVolumetricAdaptiveAveragePooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*);
[[
  name: DoubleVolumetricAdaptiveAveragePooling_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricAdaptiveAveragePooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
]]


TH_API void THNN_FloatVolumetricAdaptiveMaxPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, THLongTensor*, int, int, int);
[[
  name: FloatVolumetricAdaptiveMaxPooling_updateOutput
  return: void
  cname: THNN_FloatVolumetricAdaptiveMaxPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - THLongTensor* indices
    - int osizeT
    - int osizeW
    - int osizeH
]]


TH_API void THNN_DoubleVolumetricAdaptiveMaxPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, THLongTensor*, int, int, int);
[[
  name: DoubleVolumetricAdaptiveMaxPooling_updateOutput
  return: void
  cname: THNN_DoubleVolumetricAdaptiveMaxPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THLongTensor* indices
    - int osizeT
    - int osizeW
    - int osizeH
]]


TH_API void THNN_FloatVolumetricAdaptiveMaxPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THLongTensor*);
[[
  name: FloatVolumetricAdaptiveMaxPooling_updateGradInput
  return: void
  cname: THNN_FloatVolumetricAdaptiveMaxPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - THLongTensor* indices
]]


TH_API void THNN_DoubleVolumetricAdaptiveMaxPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THLongTensor*);
[[
  name: DoubleVolumetricAdaptiveMaxPooling_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricAdaptiveMaxPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - THLongTensor* indices
]]


TH_API void THNN_FloatSpatialReflectionPadding_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialReflectionPadding_updateOutput
  return: void
  cname: THNN_FloatSpatialReflectionPadding_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
]]


TH_API void THNN_DoubleSpatialReflectionPadding_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialReflectionPadding_updateOutput
  return: void
  cname: THNN_DoubleSpatialReflectionPadding_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
]]


TH_API void THNN_FloatSpatialReflectionPadding_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialReflectionPadding_updateGradInput
  return: void
  cname: THNN_FloatSpatialReflectionPadding_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
]]


TH_API void THNN_DoubleSpatialReflectionPadding_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialReflectionPadding_updateGradInput
  return: void
  cname: THNN_DoubleSpatialReflectionPadding_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
]]


TH_API void THNN_FloatSpatialReplicationPadding_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialReplicationPadding_updateOutput
  return: void
  cname: THNN_FloatSpatialReplicationPadding_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
]]


TH_API void THNN_DoubleSpatialReplicationPadding_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialReplicationPadding_updateOutput
  return: void
  cname: THNN_DoubleSpatialReplicationPadding_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
]]


TH_API void THNN_FloatSpatialReplicationPadding_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int);
[[
  name: FloatSpatialReplicationPadding_updateGradInput
  return: void
  cname: THNN_FloatSpatialReplicationPadding_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
]]


TH_API void THNN_DoubleSpatialReplicationPadding_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int);
[[
  name: DoubleSpatialReplicationPadding_updateGradInput
  return: void
  cname: THNN_DoubleSpatialReplicationPadding_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
]]


TH_API void THNN_FloatFeatureLPPooling_updateOutput(void*, THFloatTensor*, THFloatTensor*, double, int, int, bool);
[[
  name: FloatFeatureLPPooling_updateOutput
  return: void
  cname: THNN_FloatFeatureLPPooling_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - double power
    - int width
    - int stride
    - bool batchMode
]]


TH_API void THNN_DoubleFeatureLPPooling_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, double, int, int, bool);
[[
  name: DoubleFeatureLPPooling_updateOutput
  return: void
  cname: THNN_DoubleFeatureLPPooling_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - double power
    - int width
    - int stride
    - bool batchMode
]]


TH_API void THNN_FloatFeatureLPPooling_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, THFloatTensor*, double, int, int, bool);
[[
  name: FloatFeatureLPPooling_updateGradInput
  return: void
  cname: THNN_FloatFeatureLPPooling_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradOutput
    - THFloatTensor* input
    - THFloatTensor* output
    - THFloatTensor* gradInput
    - double power
    - int width
    - int stride
    - bool batchMode
]]


TH_API void THNN_DoubleFeatureLPPooling_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, double, int, int, bool);
[[
  name: DoubleFeatureLPPooling_updateGradInput
  return: void
  cname: THNN_DoubleFeatureLPPooling_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradOutput
    - THDoubleTensor* input
    - THDoubleTensor* output
    - THDoubleTensor* gradInput
    - double power
    - int width
    - int stride
    - bool batchMode
]]


TH_API void THNN_FloatVolumetricReplicationPadding_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int);
[[
  name: FloatVolumetricReplicationPadding_updateOutput
  return: void
  cname: THNN_FloatVolumetricReplicationPadding_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
    - int pad_front
    - int pad_back
]]


TH_API void THNN_DoubleVolumetricReplicationPadding_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int);
[[
  name: DoubleVolumetricReplicationPadding_updateOutput
  return: void
  cname: THNN_DoubleVolumetricReplicationPadding_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
    - int pad_front
    - int pad_back
]]


TH_API void THNN_FloatVolumetricReplicationPadding_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int);
[[
  name: FloatVolumetricReplicationPadding_updateGradInput
  return: void
  cname: THNN_FloatVolumetricReplicationPadding_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
    - int pad_front
    - int pad_back
]]


TH_API void THNN_DoubleVolumetricReplicationPadding_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int);
[[
  name: DoubleVolumetricReplicationPadding_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricReplicationPadding_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int pad_left
    - int pad_right
    - int pad_top
    - int pad_bottom
    - int pad_front
    - int pad_back
]]


TH_API void THNN_FloatVolumetricUpSamplingNearest_updateOutput(void*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatVolumetricUpSamplingNearest_updateOutput
  return: void
  cname: THNN_FloatVolumetricUpSamplingNearest_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int scale_factor
]]


TH_API void THNN_DoubleVolumetricUpSamplingNearest_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleVolumetricUpSamplingNearest_updateOutput
  return: void
  cname: THNN_DoubleVolumetricUpSamplingNearest_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int scale_factor
]]


TH_API void THNN_FloatVolumetricUpSamplingNearest_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int);
[[
  name: FloatVolumetricUpSamplingNearest_updateGradInput
  return: void
  cname: THNN_FloatVolumetricUpSamplingNearest_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int scale_factor
]]


TH_API void THNN_DoubleVolumetricUpSamplingNearest_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int);
[[
  name: DoubleVolumetricUpSamplingNearest_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricUpSamplingNearest_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int scale_factor
]]


TH_API void THNN_FloatVolumetricUpSamplingTrilinear_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int, int, bool);
[[
  name: FloatVolumetricUpSamplingTrilinear_updateOutput
  return: void
  cname: THNN_FloatVolumetricUpSamplingTrilinear_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int osizeT
    - int osizeH
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_DoubleVolumetricUpSamplingTrilinear_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, bool);
[[
  name: DoubleVolumetricUpSamplingTrilinear_updateOutput
  return: void
  cname: THNN_DoubleVolumetricUpSamplingTrilinear_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int osizeT
    - int osizeH
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_FloatVolumetricUpSamplingTrilinear_updateGradInput(void*, THFloatTensor*, THFloatTensor*, int, int, int, int, int, int, int, int, bool);
[[
  name: FloatVolumetricUpSamplingTrilinear_updateGradInput
  return: void
  cname: THNN_FloatVolumetricUpSamplingTrilinear_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int isizeB
    - int isizeC
    - int isizeT
    - int isizeH
    - int isizeW
    - int osizeT
    - int osizeH
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_DoubleVolumetricUpSamplingTrilinear_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, int, int, int, int, int, int, int, int, bool);
[[
  name: DoubleVolumetricUpSamplingTrilinear_updateGradInput
  return: void
  cname: THNN_DoubleVolumetricUpSamplingTrilinear_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int isizeB
    - int isizeC
    - int isizeT
    - int isizeH
    - int isizeW
    - int osizeT
    - int osizeH
    - int osizeW
    - bool align_corners
]]


TH_API void THNN_FloatTemporalReflectionPadding_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int);
[[
  name: FloatTemporalReflectionPadding_updateOutput
  return: void
  cname: THNN_FloatTemporalReflectionPadding_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int pad_left
    - int pad_right
]]


TH_API void THNN_DoubleTemporalReflectionPadding_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int);
[[
  name: DoubleTemporalReflectionPadding_updateOutput
  return: void
  cname: THNN_DoubleTemporalReflectionPadding_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int pad_left
    - int pad_right
]]


TH_API void THNN_FloatTemporalReflectionPadding_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int);
[[
  name: FloatTemporalReflectionPadding_updateGradInput
  return: void
  cname: THNN_FloatTemporalReflectionPadding_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int pad_left
    - int pad_right
]]


TH_API void THNN_DoubleTemporalReflectionPadding_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int);
[[
  name: DoubleTemporalReflectionPadding_updateGradInput
  return: void
  cname: THNN_DoubleTemporalReflectionPadding_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int pad_left
    - int pad_right
]]


TH_API void THNN_FloatTemporalReplicationPadding_updateOutput(void*, THFloatTensor*, THFloatTensor*, int, int);
[[
  name: FloatTemporalReplicationPadding_updateOutput
  return: void
  cname: THNN_FloatTemporalReplicationPadding_updateOutput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* output
    - int pad_left
    - int pad_right
]]


TH_API void THNN_DoubleTemporalReplicationPadding_updateOutput(void*, THDoubleTensor*, THDoubleTensor*, int, int);
[[
  name: DoubleTemporalReplicationPadding_updateOutput
  return: void
  cname: THNN_DoubleTemporalReplicationPadding_updateOutput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* output
    - int pad_left
    - int pad_right
]]


TH_API void THNN_FloatTemporalReplicationPadding_updateGradInput(void*, THFloatTensor*, THFloatTensor*, THFloatTensor*, int, int);
[[
  name: FloatTemporalReplicationPadding_updateGradInput
  return: void
  cname: THNN_FloatTemporalReplicationPadding_updateGradInput
  arguments:
    - void* state
    - THFloatTensor* input
    - THFloatTensor* gradOutput
    - THFloatTensor* gradInput
    - int pad_left
    - int pad_right
]]


TH_API void THNN_DoubleTemporalReplicationPadding_updateGradInput(void*, THDoubleTensor*, THDoubleTensor*, THDoubleTensor*, int, int);
[[
  name: DoubleTemporalReplicationPadding_updateGradInput
  return: void
  cname: THNN_DoubleTemporalReplicationPadding_updateGradInput
  arguments:
    - void* state
    - THDoubleTensor* input
    - THDoubleTensor* gradOutput
    - THDoubleTensor* gradInput
    - int pad_left
    - int pad_right
]]


